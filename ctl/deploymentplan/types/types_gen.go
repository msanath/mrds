// Code generated by msanath/gondolf/cligen. DO NOT EDIT.

package types

import (
	"fmt"
	"slices"
	"sort"
	"strconv"
	"strings"

	"github.com/msanath/gondolf/pkg/printer"
)

const (
	ColumnNodeId      = "node_id"
	ColumnVersion     = "version"
	ColumnIsDeleted   = "is_deleted"
	ColumnName        = "name"
	ColumnState       = "state"
	ColumnMessage     = "message"
	ColumnNamespace   = "namespace"
	ColumnServiceName = "service_name"
)

func GetDisplayDeploymentPlanColumnTags() []string {
	return []string{
		ColumnNodeId,
		ColumnVersion,
		ColumnIsDeleted,
		ColumnName,
		ColumnState,
		ColumnMessage,
		ColumnNamespace,
		ColumnServiceName,
	}
}

func ValidateDisplayDeploymentPlanColumnTags(tags []string) error {
	validTags := GetDisplayDeploymentPlanColumnTags()
	for _, tag := range tags {
		if !slices.Contains(validTags, tag) {
			return fmt.Errorf("column tag '%s' not found. Valid tags are %v", tag, validTags)
		}
	}
	return nil
}

func (n *DisplayDeploymentPlan) GetDisplayFieldFromColumnTag(columnTag string) (printer.DisplayField, error) {
	switch columnTag {
	case ColumnNodeId:
		return n.Metadata.GetID(), nil
	case ColumnVersion:
		return n.Metadata.GetVersion(), nil
	case ColumnIsDeleted:
		return n.Metadata.GetIsDeleted(), nil
	case ColumnName:
		return n.GetName(), nil
	case ColumnState:
		return n.Status.GetState(), nil
	case ColumnMessage:
		return n.Status.GetMessage(), nil
	case ColumnNamespace:
		return n.GetNamespace(), nil
	case ColumnServiceName:
		return n.GetServiceName(), nil
	}
	return printer.DisplayField{}, fmt.Errorf("column tag '%s' not found. Valid tags are %v", columnTag, GetDisplayDeploymentPlanColumnTags())
}

func (n *DisplayMetadata) GetVersion() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Version",
		ColumnTag:   "version",
		Value: func() string {
			str := strconv.Itoa(n.Version)
			return str
		},
	}
}

func (n *DisplayApplicationResources) GetCores() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Cores",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.Cores)
			return str
		},
	}
}

func (n *DisplayApplicationResources) GetMemory() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Memory (MB)",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.Memory)
			return str
		},
	}
}

func (n *DisplayApplicationPort) GetPort() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Port",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.Port)
			return str
		},
	}
}

func (n *DisplayApplicationPersistentVolume) GetCapacity() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Capacity (GB)",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.Capacity)
			return str
		},
	}
}

func (n *DisplayDeployment) GetInstanceCount() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Instance Count",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.InstanceCount)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumTotalInstances() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Total Instances",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumTotalInstances)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumRunningInstances() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Running Instances",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumRunningInstances)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumPendingInstances() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Pending Instances",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumPendingInstances)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumFailedInstances() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Failed Instances",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumFailedInstances)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumCreateOperationsPendingApproval() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Create Operations Pending",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumCreateOperationsPending)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumStopOperationsPendingApproval() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Stop Operations Pending",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumStopOperationsPending)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumRestartOperationsPendingApproval() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Restart Operations Pending",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumRestartOperationsPending)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumUpdateOperationsPendingApproval() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Update Operations Pending",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumUpdateOperationsPending)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumRelocateOperationsPendingApproval() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Relocate Operations Pending",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumRelocateOperationsPending)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumDeleteOperationsPendingApproval() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Delete Operations Pending",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumDeleteOperationsPending)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumCreateOperationsApproved() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Create Operations Approved",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumCreateOperationsApproved)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumStopOperationsApproved() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Stop Operations Approved",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumStopOperationsApproved)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumRestartOperationsApproved() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Restart Operations Approved",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumRestartOperationsApproved)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumUpdateOperationsApproved() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Update Operations Approved",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumUpdateOperationsApproved)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumRelocateOperationsApproved() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Relocate Operations Approved",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumRelocateOperationsApproved)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumDeleteOperationsApproved() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Delete Operations Approved",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumDeleteOperationsApproved)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumCreateOperationsFailed() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Create Operations Failed",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumCreateOperationsFailed)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumStopOperationsFailed() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Stop Operations Failed",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumStopOperationsFailed)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumRestartOperationsFailed() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Restart Operations Failed",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumRestartOperationsFailed)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumUpdateOperationsFailed() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Update Operations Failed",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumUpdateOperationsFailed)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumRelocateOperationsFailed() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Relocate Operations Failed",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumRelocateOperationsFailed)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumDeleteOperationsFailed() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Delete Operations Failed",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumDeleteOperationsFailed)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumCreateOperationsSucceeded() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Create Operations Succeeded",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumCreateOperationsSucceeded)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumStopOperationsSucceeded() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Stop Operations Succeeded",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumStopOperationsSucceeded)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumRestartOperationsSucceeded() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Restart Operations Succeeded",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumRestartOperationsSucceeded)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumUpdateOperationsSucceeded() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Update Operations Succeeded",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumUpdateOperationsSucceeded)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumRelocateOperationsSucceeded() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Relocate Operations Succeeded",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumRelocateOperationsSucceeded)
			return str
		},
	}
}

func (n *DisplayInstanceSummary) GetNumDeleteOperationsSucceeded() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Delete Operations Succeeded",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.NumDeleteOperationsSucceeded)
			return str
		},
	}
}

func (n *DisplayMetadata) GetIsDeleted() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Is Deleted",
		ColumnTag:   "is_deleted",
		Value: func() string {
			str := strconv.FormatBool(n.IsDeleted)
			if str == "true" {
				return printer.RedText(str)
			}
			if str == "false" {
				return printer.GreenText(str)
			}
			return str
		},
	}
}

func (n *DisplayMatchingComputeCapability) GetCapabilityNames() printer.DisplayField {

	// Sort the array to make the output deterministic
	sort.Strings(n.CapabilityNames)
	return printer.DisplayField{
		DisplayName: "Capability Names",
		ColumnTag:   "",
		Value: func() string {
			str := strings.Join(n.CapabilityNames, "\n")
			return str
		},
	}
}

func (n *DisplayMetadata) GetID() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Node ID",
		ColumnTag:   "node_id",
		Value: func() string {
			str := n.ID
			return str
		},
	}
}

func (n *DisplayDeploymentPlan) GetName() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Deployment Plan Name",
		ColumnTag:   "name",
		Value: func() string {
			str := n.Name
			return str
		},
	}
}

func (n *DisplayDeploymentPlanStatus) GetState() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Deployment Plan State",
		ColumnTag:   "state",
		Value: func() string {
			str := n.State
			if str == "DeploymentPlanState_INACTIVE" {
				return printer.RedText(str)
			}
			if str == "DeploymentPlanState_UNKNOWN" {
				return printer.RedText(str)
			}
			if str == "DeploymentPlanState_ACTIVE" {
				return printer.GreenText(str)
			}
			return str
		},
	}
}

func (n *DisplayDeploymentPlanStatus) GetMessage() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Status Message",
		ColumnTag:   "message",
		Value: func() string {
			str := n.Message
			return str
		},
	}
}

func (n *DisplayDeploymentPlan) GetNamespace() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Namespace",
		ColumnTag:   "namespace",
		Value: func() string {
			str := n.Namespace
			return str
		},
	}
}

func (n *DisplayDeploymentPlan) GetServiceName() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Service Name",
		ColumnTag:   "service_name",
		Value: func() string {
			str := n.ServiceName
			return str
		},
	}
}

func (n *DisplayMatchingComputeCapability) GetCapabilityType() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Capability Type",
		ColumnTag:   "",
		Value: func() string {
			str := n.CapabilityType
			return str
		},
	}
}

func (n *DisplayMatchingComputeCapability) GetComparator() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Comparator",
		ColumnTag:   "",
		Value: func() string {
			str := n.Comparator
			return str
		},
	}
}

func (n *DisplayApplication) GetPayloadName() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Payload Name",
		ColumnTag:   "",
		Value: func() string {
			str := n.PayloadName
			return str
		},
	}
}

func (n *DisplayApplicationPort) GetProtocol() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Protocol",
		ColumnTag:   "",
		Value: func() string {
			str := n.Protocol
			return str
		},
	}
}

func (n *DisplayApplicationPersistentVolume) GetStorageClass() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Storage Class",
		ColumnTag:   "",
		Value: func() string {
			str := n.StorageClass
			return str
		},
	}
}

func (n *DisplayApplicationPersistentVolume) GetMountPath() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Mount Path",
		ColumnTag:   "",
		Value: func() string {
			str := n.MountPath
			return str
		},
	}
}

func (n *DisplayDeployment) GetID() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Deployment ID",
		ColumnTag:   "",
		Value: func() string {
			str := n.ID
			return str
		},
	}
}

func (n *DisplayDeploymentStatus) GetState() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Deployment State",
		ColumnTag:   "",
		Value: func() string {
			str := n.State
			if str == "DeploymentState_FAILED" {
				return printer.RedText(str)
			}
			if str == "DeploymentState_PENDING" {
				return printer.RedText(str)
			}
			if str == "DeploymentState_COMPLETED" {
				return printer.GreenText(str)
			}
			return str
		},
	}
}

func (n *DisplayDeploymentStatus) GetMessage() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Status Message",
		ColumnTag:   "",
		Value: func() string {
			str := n.Message
			return str
		},
	}
}

func (n *DisplayPayloadCoordinates) GetPayloadName() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Payload Name",
		ColumnTag:   "",
		Value: func() string {
			str := n.PayloadName
			return str
		},
	}
}

func (n *DisplayPayloadCoordinates) GetCoordinates() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Coordinates",
		ColumnTag:   "",
		Value: func() string {
			str := n.Coordinates
			return str
		},
	}
}
