// Code generated by msanath/gondolf/cligen. DO NOT EDIT.

package types

import (
	"fmt"
	"slices"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/msanath/gondolf/pkg/duration"
	"github.com/msanath/gondolf/pkg/printer"
)

const (
	ColumnNodeId        = "node_id"
	ColumnVersion       = "version"
	ColumnIsDeleted     = "is_deleted"
	ColumnName          = "name"
	ColumnState         = "state"
	ColumnMessage       = "message"
	ColumnClusterId     = "cluster_id"
	ColumnUpdateDomain  = "update_domain"
	ColumnCores         = "cores"
	ColumnMemory        = "memory"
	ColumnCapabilityIds = "capability_ids"
)

func GetDisplayNodeColumnTags() []string {
	return []string{
		ColumnNodeId,
		ColumnVersion,
		ColumnIsDeleted,
		ColumnName,
		ColumnState,
		ColumnMessage,
		ColumnClusterId,
		ColumnUpdateDomain,
		ColumnCores,
		ColumnMemory,
		ColumnCapabilityIds,
	}
}

func ValidateDisplayNodeColumnTags(tags []string) error {
	validTags := GetDisplayNodeColumnTags()
	for _, tag := range tags {
		if !slices.Contains(validTags, tag) {
			return fmt.Errorf("column tag '%s' not found. Valid tags are %v", tag, validTags)
		}
	}
	return nil
}

func (n *DisplayNode) GetDisplayFieldFromColumnTag(columnTag string) (printer.DisplayField, error) {
	switch columnTag {
	case ColumnNodeId:
		return n.Metadata.GetID(), nil
	case ColumnVersion:
		return n.Metadata.GetVersion(), nil
	case ColumnIsDeleted:
		return n.Metadata.GetIsDeleted(), nil
	case ColumnName:
		return n.GetName(), nil
	case ColumnState:
		return n.Status.GetState(), nil
	case ColumnMessage:
		return n.Status.GetMessage(), nil
	case ColumnClusterId:
		return n.GetClusterID(), nil
	case ColumnUpdateDomain:
		return n.GetUpdateDomain(), nil
	case ColumnCores:
		return n.TotalResources.GetCores(), nil
	case ColumnMemory:
		return n.TotalResources.GetMemory(), nil
	case ColumnCapabilityIds:
		return n.GetCapabilityIDs(), nil
	}
	return printer.DisplayField{}, fmt.Errorf("column tag '%s' not found. Valid tags are %v", columnTag, GetDisplayNodeColumnTags())
}

func (n *DisplayMetadata) GetVersion() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Version",
		ColumnTag:   "version",
		Value: func() string {
			str := strconv.Itoa(n.Version)
			return str
		},
	}
}

func (n *DisplayResources) GetCores() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Cores",
		ColumnTag:   "cores",
		Value: func() string {
			str := strconv.Itoa(n.Cores)
			return str
		},
	}
}

func (n *DisplayResources) GetMemory() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Memory (MB)",
		ColumnTag:   "memory",
		Value: func() string {
			str := strconv.Itoa(n.Memory)
			return str
		},
	}
}

func (n *DisplayLocalVolume) GetStorageCapacity() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Storage Capacity (GB)",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.StorageCapacity)
			return str
		},
	}
}

func (n *DisplayMetadata) GetIsDeleted() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Is Deleted",
		ColumnTag:   "is_deleted",
		Value: func() string {
			str := strconv.FormatBool(n.IsDeleted)
			if str == "true" {
				return printer.RedText(str)
			}
			if str == "false" {
				return printer.GreenText(str)
			}
			return str
		},
	}
}

func (n *DisplayDisruption) GetShouldEvict() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Should Evict",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.FormatBool(n.ShouldEvict)
			if str == "true" {
				return printer.RedText(str)
			}
			if str == "false" {
				return printer.GreenText(str)
			}
			return str
		},
	}
}

func (n *DisplayNode) GetCapabilityIDs() printer.DisplayField {

	// Sort the array to make the output deterministic
	sort.Strings(n.CapabilityIDs)
	return printer.DisplayField{
		DisplayName: "Capability IDs",
		ColumnTag:   "capability_ids",
		Value: func() string {
			str := strings.Join(n.CapabilityIDs, "\n")
			return str
		},
	}
}

func (n *DisplayMetadata) GetID() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Node ID",
		ColumnTag:   "node_id",
		Value: func() string {
			str := n.ID
			return str
		},
	}
}

func (n *DisplayNode) GetName() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Node Name",
		ColumnTag:   "name",
		Value: func() string {
			str := n.Name
			return str
		},
	}
}

func (n *DisplayNodeStatus) GetState() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Node State",
		ColumnTag:   "state",
		Value: func() string {
			str := n.State
			if str == "NodeState_EVICTED" {
				return printer.RedText(str)
			}
			if str == "NodeState_SANITIZING" {
				return printer.RedText(str)
			}
			if str == "NodeState_ALLOCATED" {
				return printer.GreenText(str)
			}
			if str == "NodeState_UNALLOCATED" {
				return printer.GreenText(str)
			}
			return str
		},
	}
}

func (n *DisplayNodeStatus) GetMessage() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Status Message",
		ColumnTag:   "message",
		Value: func() string {
			str := n.Message
			return str
		},
	}
}

func (n *DisplayNode) GetClusterID() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Cluster ID",
		ColumnTag:   "cluster_id",
		Value: func() string {
			str := n.ClusterID
			return str
		},
	}
}

func (n *DisplayNode) GetUpdateDomain() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Update Domain",
		ColumnTag:   "update_domain",
		Value: func() string {
			str := n.UpdateDomain
			return str
		},
	}
}

func (n *DisplayLocalVolume) GetMountPath() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Mount Path",
		ColumnTag:   "",
		Value: func() string {
			str := n.MountPath
			return str
		},
	}
}

func (n *DisplayLocalVolume) GetStorageClass() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Storage Class",
		ColumnTag:   "",
		Value: func() string {
			str := n.StorageClass
			return str
		},
	}
}

func (n *DisplayDisruption) GetID() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Disruption ID",
		ColumnTag:   "",
		Value: func() string {
			str := n.ID
			return str
		},
	}
}

func (n *DisplayDisruptionStatus) GetState() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Disruption State",
		ColumnTag:   "",
		Value: func() string {
			str := n.State
			if str == "DisruptionState_SCHEDULED" {
				return printer.RedText(str)
			}
			if str == "DisruptionState_UNKNOWN" {
				return printer.RedText(str)
			}
			if str == "DisruptionState_COMPLETED" {
				return printer.GreenText(str)
			}
			return str
		},
	}
}

func (n *DisplayDisruptionStatus) GetMessage() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Disruption Status Message",
		ColumnTag:   "",
		Value: func() string {
			str := n.Message
			return str
		},
	}
}

func (n *DisplayDisruption) GetStartTime() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Start Time",
		ColumnTag:   "",
		Value: func() string {
			str := n.StartTime.String()
			curTime := time.Now().UTC()
			agoTime := curTime.Sub(n.StartTime)
			str += " (" + duration.HumanDuration(agoTime) + " ago)"
			return str
		},
	}
}
