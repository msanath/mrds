syntax = "proto3";

package proto.mrds.ledger.cluster;

import "metadata.proto";
import "cluster.proto";

option go_package = "/api/mrdspb";

// Service definition for managing Cluster records.
service Clusters {
    // Create a new Cluster.
    rpc Create(CreateClusterRequest) returns (CreateClusterResponse);

    // Get a Cluster by its ID.
    rpc GetByID(GetClusterByIDRequest) returns (GetClusterResponse);

    // Get a Cluster by its name.
    rpc GetByName(GetClusterByNameRequest) returns (GetClusterResponse);

    // Update the state of an existing Cluster.
    rpc UpdateStatus(UpdateClusterStatusRequest) returns (UpdateClusterResponse);

    // List Clusters that match the provided filters.
    rpc List(ListClusterRequest) returns (ListClusterResponse);

    // Delete a Cluster by its metadata.
    rpc Delete(DeleteClusterRequest) returns (DeleteClusterResponse);
}

// Request to create a new Cluster.
message CreateClusterRequest {
    string name = 1;
}

// Response after creating a new Cluster.
message CreateClusterResponse {
    // The newly created Cluster record.
    Cluster record = 1;
}

// Request to update the state and message of a Cluster.
message UpdateClusterStatusRequest {
    // The metadata of the Cluster to update.
    core.Metadata metadata = 1;

    // The new state of the Cluster.
    ClusterStatus status = 2;
}

// Response after updating the state of a Cluster.
message UpdateClusterResponse {
    // The updated Cluster record.
    Cluster record = 1;
}

message GetClusterByIDRequest {
    string id = 1;
}

// Request for getting a Cluster by its name.
message GetClusterByNameRequest {
    // The name of the Cluster to get.
    string name = 1;
}

// Response after fetching a Cluster.
message GetClusterResponse {
    // The Cluster record that was fetched.
    Cluster record = 1;
}

// Request to list Clusters with specific filters.
message ListClusterRequest {
    // IN condition for filtering by IDs.
    repeated string id_in = 1;

    // IN condition for filtering by Names.
    repeated string name_in = 2;

    // Greater than or equal condition for filtering by version.
    uint64 version_gte = 3;

    // Less than or equal condition for filtering by version.
    uint64 version_lte = 4;

    // Equal condition for filtering by version.
    uint64 version_eq = 5;

    // IN condition for filtering by state.
    repeated ClusterState state_in = 6;

    // NOT IN condition for filtering by state.
    repeated ClusterState state_not_in = 7;

    // Whether to include soft-deleted resources in the query.
    bool include_deleted = 8;

    // Limit the number of results returned.
    uint32 limit = 9;
}

// Response for listing Clusters.
message ListClusterResponse {
    // The list of Cluster records that match the query.
    repeated Cluster records = 1;
}

// Request to delete a Cluster by its metadata.
message DeleteClusterRequest {
    // The metadata of the Cluster to delete.
    core.Metadata metadata = 1;
}

// Response after deleting a Cluster.
message DeleteClusterResponse {}
