syntax = "proto3";

package proto.mrds.ledger.metainstance;

import "metadata.proto";
import "metainstance.proto";

option go_package = "/api/mrdspb";

// Service definition for managing MetaInstance records.
service MetaInstances {
    // Create a new MetaInstance.
    rpc Create(CreateMetaInstanceRequest) returns (CreateMetaInstanceResponse);

    // Get a MetaInstance by its ID.
    rpc GetByID(GetMetaInstanceByIDRequest) returns (GetMetaInstanceResponse);

    // Get a MetaInstance by its name.
    rpc GetByName(GetMetaInstanceByNameRequest) returns (GetMetaInstanceResponse);

    // Update the status of an existing MetaInstance.
    rpc UpdateStatus(UpdateMetaInstanceStatusRequest) returns (UpdateMetaInstanceResponse);

    // Update the DeploymentID of an existing MetaInstance.
    rpc UpdateDeploymentID(UpdateDeploymentIDRequest) returns (UpdateMetaInstanceResponse);

    // List MetaInstances that match the provided filters.
    rpc List(ListMetaInstanceRequest) returns (ListMetaInstanceResponse);

    // Delete a MetaInstance by its metadata.
    rpc Delete(DeleteMetaInstanceRequest) returns (DeleteMetaInstanceResponse);

    rpc AddRuntimeInstance(AddRuntimeInstanceRequest) returns (UpdateMetaInstanceResponse);
    rpc UpdateRuntimeStatus(UpdateRuntimeStatusRequest) returns (UpdateMetaInstanceResponse);
    rpc UpdateRuntimeActiveState(UpdateRuntimeActiveStateRequest) returns (UpdateMetaInstanceResponse);
    rpc RemoveRuntimeInstance(RemoveRuntimeInstanceRequest) returns (UpdateMetaInstanceResponse);

    rpc AddOperation(AddOperationRequest) returns (UpdateMetaInstanceResponse);
    rpc UpdateOperationStatus(UpdateOperationStatusRequest) returns (UpdateMetaInstanceResponse);
    rpc RemoveOperation(RemoveOperationRequest) returns (UpdateMetaInstanceResponse);
}

// Request to create a new MetaInstance.
message CreateMetaInstanceRequest {
    string name = 1;
    string deployment_plan_id = 2;
    string deployment_id = 3;
}

// Response after creating a new MetaInstance.
message CreateMetaInstanceResponse {
    MetaInstance record = 1;
}

// Request to update the status of a MetaInstance.
message UpdateMetaInstanceStatusRequest {
    core.Metadata metadata = 1;
    MetaInstanceStatus status = 2;
}

// Request to update the DeploymentID of a MetaInstance.
message UpdateDeploymentIDRequest {
    core.Metadata metadata = 1;
    string deployment_id = 2;
}

// Response after updating the status of a MetaInstance.
message UpdateMetaInstanceResponse {
    MetaInstance record = 1;
}

// Get a MetaInstance by its ID.
message GetMetaInstanceByIDRequest {
    string id = 1;
}

// Request to get a MetaInstance by its name.
message GetMetaInstanceByNameRequest {
    string name = 1;
}

// Response after fetching a MetaInstance.
message GetMetaInstanceResponse {
    MetaInstance record = 1;
}

// Request to list MetaInstances with specific filters.
message ListMetaInstanceRequest {
    repeated string id_in = 1;
    repeated string name_in = 2;
    uint64 version_gte = 3;
    uint64 version_lte = 4;
    uint64 version_eq = 5;
    repeated MetaInstanceState state_in = 6;
    repeated MetaInstanceState state_not_in = 7;
    bool include_deleted = 8;
    uint32 limit = 9;
    repeated string deployment_plan_id_in = 10;
    repeated string deployment_id_in = 11;
}

// Response for listing MetaInstances.
message ListMetaInstanceResponse {
    repeated MetaInstance records = 1;
}

// Request to delete a MetaInstance by its metadata.
message DeleteMetaInstanceRequest {
    core.Metadata metadata = 1;
}

// Response after deleting a MetaInstance.
message DeleteMetaInstanceResponse {}

// Request to add a RuntimeInstance to a MetaInstance.
message AddRuntimeInstanceRequest {
    core.Metadata metadata = 1;
    RuntimeInstance runtime_instance = 2;
}

// Request to update the status of a RuntimeInstance.
message UpdateRuntimeStatusRequest {
    core.Metadata metadata = 1;
    string runtime_instance_id = 2;
    RuntimeInstanceStatus status = 3;
}

// Request to update the active state of a RuntimeInstance.
message UpdateRuntimeActiveStateRequest {
    core.Metadata metadata = 1;
    string runtime_instance_id = 2;
    bool is_active = 3;
}

// Request to remove a RuntimeInstance from a MetaInstance.
message RemoveRuntimeInstanceRequest {
    core.Metadata metadata = 1;
    string runtime_instance_id = 2;
}

// Request to add an Operation to a MetaInstance.
message AddOperationRequest {
    core.Metadata metadata = 1;
    Operation operation = 2;
}

// Request to update the status of an Operation.
message UpdateOperationStatusRequest {
    core.Metadata metadata = 1;
    string operation_id = 2;
    OperationStatus status = 3;
}

// Request to remove an Operation from a MetaInstance.
message RemoveOperationRequest {
    core.Metadata metadata = 1;
    string operation_id = 2;
}
