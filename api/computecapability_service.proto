syntax = "proto3";

package proto.mrds.ledger.computecapability;

import "metadata.proto";
import "computecapability.proto";

option go_package = "/api/mrdspb";

// Service definition for managing ComputeCapability records.
service ComputeCapabilities {
    // Create a new ComputeCapability.
    rpc Create(CreateComputeCapabilityRequest) returns (CreateComputeCapabilityResponse);

    // Get a ComputeCapability by its metadata.
    rpc GetByMetadata(GetComputeCapabilityByMetadataRequest) returns (GetComputeCapabilityResponse);

    // Get a ComputeCapability by its name.
    rpc GetByName(GetComputeCapabilityByNameRequest) returns (GetComputeCapabilityResponse);

    // Update the state of an existing ComputeCapability.
    rpc UpdateState(UpdateComputeCapabilityStateRequest) returns (UpdateComputeCapabilityResponse);

    // List ComputeCapabilitys that match the provided filters.
    rpc List(ListComputeCapabilityRequest) returns (ListComputeCapabilityResponse);

    // Delete a ComputeCapability by its metadata.
    rpc Delete(DeleteComputeCapabilityRequest) returns (DeleteComputeCapabilityResponse);
}

// Request to create a new ComputeCapability.
message CreateComputeCapabilityRequest {
    string name = 1;
    string type = 2;
    uint32 score = 3;
}

// Response after creating a new ComputeCapability.
message CreateComputeCapabilityResponse {
    // The newly created ComputeCapability record.
    ComputeCapability record = 1;
}

// Request to update the state and message of a ComputeCapability.
message UpdateComputeCapabilityStateRequest {
    // The metadata of the ComputeCapability to update.
    core.Metadata metadata = 1;

    // The new state of the ComputeCapability.
    ComputeCapabilityStatus status = 2;
}

// Response after updating the state of a ComputeCapability.
message UpdateComputeCapabilityResponse {
    // The updated ComputeCapability record.
    ComputeCapability record = 1;
}

message GetComputeCapabilityByMetadataRequest {
    core.Metadata metadata = 1;
}

// Request for getting a ComputeCapability by its name.
message GetComputeCapabilityByNameRequest {
    // The name of the ComputeCapability to get.
    string name = 1;
}

// Response after fetching a ComputeCapability.
message GetComputeCapabilityResponse {
    // The ComputeCapability record that was fetched.
    ComputeCapability record = 1;
}

// Request to list ComputeCapabilitys with specific filters.
message ListComputeCapabilityRequest {
    // IN condition for filtering by IDs.
    repeated string id_in = 1;

    // IN condition for filtering by Names.
    repeated string name_in = 2;

    // Greater than or equal condition for filtering by version.
    uint64 version_gte = 3;

    // Less than or equal condition for filtering by version.
    uint64 version_lte = 4;

    // Equal condition for filtering by version.
    uint64 version_eq = 5;

    // IN condition for filtering by state.
    repeated ComputeCapabilityState state_in = 6;

    // NOT IN condition for filtering by state.
    repeated ComputeCapabilityState state_not_in = 7;

    // Whether to include soft-deleted resources in the query.
    bool include_deleted = 8;

    // Limit the number of results returned.
    uint32 limit = 9;

    repeated string type_in = 10;
}

// Response for listing ComputeCapabilitys.
message ListComputeCapabilityResponse {
    // The list of ComputeCapability records that match the query.
    repeated ComputeCapability records = 1;
}

// Request to delete a ComputeCapability by its metadata.
message DeleteComputeCapabilityRequest {
    // The metadata of the ComputeCapability to delete.
    core.Metadata metadata = 1;
}

// Response after deleting a ComputeCapability.
message DeleteComputeCapabilityResponse {}
