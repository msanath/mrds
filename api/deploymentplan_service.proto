syntax = "proto3";

package proto.mrds.ledger.deploymentplan;

import "metadata.proto";
import "deploymentplan.proto";

option go_package = "/api/mrdspb";


service DeploymentPlans {
    // Create a new DeploymentPlan.
    rpc Create(CreateDeploymentPlanRequest) returns (CreateDeploymentPlanResponse);

    // Get a DeploymentPlan by its metadata.
    rpc GetByMetadata(GetDeploymentPlanByMetadataRequest) returns (GetDeploymentPlanResponse);

    // Get a DeploymentPlan by its name.
    rpc GetByName(GetDeploymentPlanByNameRequest) returns (GetDeploymentPlanResponse);

    // Update the state of an existing DeploymentPlan.
    rpc UpdateStatus(UpdateDeploymentPlanStatusRequest) returns (UpdateDeploymentPlanResponse);

    // List DeploymentPlans that match the provided filters.
    rpc List(ListDeploymentPlanRequest) returns (ListDeploymentPlanResponse);

    // Delete a DeploymentPlan by its metadata.
    rpc Delete(DeleteDeploymentPlanRequest) returns (DeleteDeploymentPlanResponse);

    // Add a Deployment to an existing DeploymentPlan.
    rpc AddDeployment(AddDeploymentRequest) returns (UpdateDeploymentPlanResponse);

    // Update the status of an existing Deployment.
    rpc UpdateDeploymentStatus(UpdateDeploymentStatusRequest) returns (UpdateDeploymentPlanResponse);
}

// Request and response messages for service methods.

// CreateDeploymentPlanRequest represents the request to create a DeploymentPlan.
message CreateDeploymentPlanRequest {
    string name = 1;
    string namespace = 2;
    string service_name = 3;
    repeated MatchingComputeCapability matching_compute_capabilities = 4;
    repeated Application applications = 5;
}

// CreateDeploymentPlanResponse represents the response after creating a DeploymentPlan.
message CreateDeploymentPlanResponse {
    DeploymentPlanRecord record = 1;
}

// GetDeploymentPlanByMetadataRequest represents the request to get a DeploymentPlan by metadata.
message GetDeploymentPlanByMetadataRequest {
    core.Metadata metadata = 1;
}

// GetDeploymentPlanByNameRequest represents the request to get a DeploymentPlan by name.
message GetDeploymentPlanByNameRequest {
    string name = 1;
}

// GetDeploymentPlanResponse represents the response for fetching a DeploymentPlan.
message GetDeploymentPlanResponse {
    DeploymentPlanRecord record = 1;
}

// UpdateDeploymentPlanStatusRequest represents the request to update the state of a DeploymentPlan.
message UpdateDeploymentPlanStatusRequest {
    core.Metadata metadata = 1;
    DeploymentPlanStatus status = 2;
}

// UpdateDeploymentPlanResponse represents the response after updating the state of a DeploymentPlan.
message UpdateDeploymentPlanResponse {
    DeploymentPlanRecord record = 1;
}

// ListDeploymentPlanRequest represents the request to list DeploymentPlans with filters.
message ListDeploymentPlanRequest {
    DeploymentPlanListFilters filters = 1;
}

// ListDeploymentPlanResponse represents the response to a list request.
message ListDeploymentPlanResponse {
    repeated DeploymentPlanRecord records = 1;
}

// DeleteDeploymentPlanRequest represents the request to delete a DeploymentPlan by metadata.
message DeleteDeploymentPlanRequest {
    core.Metadata metadata = 1;
}

// DeleteDeploymentPlanResponse represents the response after deleting a DeploymentPlan.
message DeleteDeploymentPlanResponse {
    bool success = 1;
}

// AddDeploymentRequest represents the request to add a deployment to a DeploymentPlan.
message AddDeploymentRequest {
    core.Metadata metadata = 1;
    string deployment_id = 2;
    repeated PayloadCoordinates payload_coordinates = 3;
    uint32 instance_count = 4;
}

// UpdateDeploymentStatusRequest represents the request to update the status of a deployment.
message UpdateDeploymentStatusRequest {
    core.Metadata metadata = 1;
    string deployment_id = 2;
    DeploymentStatus status = 3;
}

// DeploymentPlanListFilters defines the filters for listing DeploymentPlans.
message DeploymentPlanListFilters {
    repeated string id_in = 1;
    repeated string name_in = 2;
    optional uint64 version_gte = 3;
    optional uint64 version_lte = 4;
    optional uint64 version_eq = 5;
    repeated string payload_name_in = 6;
    repeated string service_name_in = 7;

    repeated string deployment_plan_id_in = 8;
    repeated DeploymentPlanState deployment_plan_status_in = 9;

    bool include_deleted = 10;
    uint32 limit = 11;

    repeated DeploymentPlanState state_in = 12;
    repeated DeploymentPlanState state_not_in = 13;
}
