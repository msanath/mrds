syntax = "proto3";

package proto.mrds.ledger.node;

// Import the Metadata from the core metadata.proto file
import "metadata.proto";

option go_package = "/api/mrdspb";

// Enum to represent the NodeState
enum NodeState {
    NodeState_UNKNOWN = 0;
	NodeState_UNALLOCATED = 1;
    NodeState_ALLOCATING = 2;
    NodeState_ALLOCATED = 3;
    NodeState_EVICTED = 4;
    NodeState_SANITIZING = 5;
}

// Message representing the Node
message Node {
    // Metadata is the metadata that identifies the Node.
    core.Metadata metadata = 1;

    // Name is the name of the Node.
    string name = 2;

    // Status represents the current status of the Node.
    NodeStatus status = 3;

    // ClusterID is the ID of the Cluster that the Node belongs to.
    string cluster_id = 4;

    // TotalResources is the total resources available on the Node.
    Resources total_resources = 5;

    // SystemReservedResources is the resources reserved by the system on the Node.
    Resources system_reserved_resources = 6;

    // RemainingResources is the remaining resources available on the Node.
    Resources remaining_resources = 7;

    // UpdateDomain is the update domain of the Node.
    string update_domain = 8;

    // LocalVolumes is the local volumes available on the Node.
    repeated NodeLocalVolume local_volumes = 9;

    // Disruptions is the list of disruptions scheduled for the Node.
    repeated NodeDisruption disruptions = 10;

    // Capabilities is the list of capabilities available on the Node.
    repeated string capability_ids = 11;
}

message NodeLocalVolume {
    // MountPath is the path where the volume is mounted on the Node.
    string mount_path = 1;

    // StorageClass is the storage class of the volume.
    string storage_class = 2;

    // Capacity is the capacity of the volume in GB.
    uint32 storage_capacity = 3;
}

message Resources {
    // Cores is the number of CPU cores available on the Node.
    uint32 cores = 1;

    // Memory is the amount of memory available on the Node in bytes.
    uint32 memory = 2;
}

// Message representing the Status of a resource.
message NodeStatus {
    // State is the discrete condition of the resource.
    NodeState state = 1;

    // Message is a human-readable description of the resource's state.
    string message = 2;
}

message NodeDisruption {
    // ID is the ID of the disruption.
    string id = 1;

    // ShouldEvict is a flag to indicate if the Node should be evicted.
    bool should_evict = 2;

    // StartTime is the time when the disruption should start.
    // google.protobuf.Timestamp start_time = 3;

    DisruptionStatus status = 4;
}

// Enum to represent the NodeState
enum DisruptionState {
    DisruptionState_UNKNOWN = 0;
    DisruptionState_SCHEDULED = 1;
    DisruptionState_APPROVED = 2;
    DisruptionState_COMPLETED = 3;
}

message DisruptionStatus {
    // State is the state of the disruption.
    DisruptionState state = 1;

    // Message is a human-readable description of the disruption's state.
    string message = 2;
}

