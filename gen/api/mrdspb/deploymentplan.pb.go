// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: deploymentplan.proto

package mrdspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for the state of a Deployment.
type DeploymentPlanState int32

const (
	DeploymentPlanState_DeploymentPlanState_UNKNOWN  DeploymentPlanState = 0
	DeploymentPlanState_DeploymentPlanState_ACTIVE   DeploymentPlanState = 1
	DeploymentPlanState_DeploymentPlanState_INACTIVE DeploymentPlanState = 2
)

// Enum value maps for DeploymentPlanState.
var (
	DeploymentPlanState_name = map[int32]string{
		0: "DeploymentPlanState_UNKNOWN",
		1: "DeploymentPlanState_ACTIVE",
		2: "DeploymentPlanState_INACTIVE",
	}
	DeploymentPlanState_value = map[string]int32{
		"DeploymentPlanState_UNKNOWN":  0,
		"DeploymentPlanState_ACTIVE":   1,
		"DeploymentPlanState_INACTIVE": 2,
	}
)

func (x DeploymentPlanState) Enum() *DeploymentPlanState {
	p := new(DeploymentPlanState)
	*p = x
	return p
}

func (x DeploymentPlanState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentPlanState) Descriptor() protoreflect.EnumDescriptor {
	return file_deploymentplan_proto_enumTypes[0].Descriptor()
}

func (DeploymentPlanState) Type() protoreflect.EnumType {
	return &file_deploymentplan_proto_enumTypes[0]
}

func (x DeploymentPlanState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentPlanState.Descriptor instead.
func (DeploymentPlanState) EnumDescriptor() ([]byte, []int) {
	return file_deploymentplan_proto_rawDescGZIP(), []int{0}
}

// Enum for the type of comparator used for capability matching.
type Comparator int32

const (
	Comparator_Comparator_IN     Comparator = 0
	Comparator_Comparator_NOT_IN Comparator = 1
	Comparator_Comparator_GTE    Comparator = 2
	Comparator_ComparatorE_LTE   Comparator = 3
)

// Enum value maps for Comparator.
var (
	Comparator_name = map[int32]string{
		0: "Comparator_IN",
		1: "Comparator_NOT_IN",
		2: "Comparator_GTE",
		3: "ComparatorE_LTE",
	}
	Comparator_value = map[string]int32{
		"Comparator_IN":     0,
		"Comparator_NOT_IN": 1,
		"Comparator_GTE":    2,
		"ComparatorE_LTE":   3,
	}
)

func (x Comparator) Enum() *Comparator {
	p := new(Comparator)
	*p = x
	return p
}

func (x Comparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Comparator) Descriptor() protoreflect.EnumDescriptor {
	return file_deploymentplan_proto_enumTypes[1].Descriptor()
}

func (Comparator) Type() protoreflect.EnumType {
	return &file_deploymentplan_proto_enumTypes[1]
}

func (x Comparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Comparator.Descriptor instead.
func (Comparator) EnumDescriptor() ([]byte, []int) {
	return file_deploymentplan_proto_rawDescGZIP(), []int{1}
}

// Enum for the state of a Deployment.
type DeploymentState int32

const (
	DeploymentState_DeploymentState_UNKNOWN     DeploymentState = 0
	DeploymentState_DeploymentState_PENDING     DeploymentState = 1
	DeploymentState_DeploymentState_IN_PROGRESS DeploymentState = 2
	DeploymentState_DeploymentState_FAILED      DeploymentState = 3
	DeploymentState_DeploymentState_PAUSED      DeploymentState = 4
	DeploymentState_DeploymentState_COMPLETED   DeploymentState = 5
)

// Enum value maps for DeploymentState.
var (
	DeploymentState_name = map[int32]string{
		0: "DeploymentState_UNKNOWN",
		1: "DeploymentState_PENDING",
		2: "DeploymentState_IN_PROGRESS",
		3: "DeploymentState_FAILED",
		4: "DeploymentState_PAUSED",
		5: "DeploymentState_COMPLETED",
	}
	DeploymentState_value = map[string]int32{
		"DeploymentState_UNKNOWN":     0,
		"DeploymentState_PENDING":     1,
		"DeploymentState_IN_PROGRESS": 2,
		"DeploymentState_FAILED":      3,
		"DeploymentState_PAUSED":      4,
		"DeploymentState_COMPLETED":   5,
	}
)

func (x DeploymentState) Enum() *DeploymentState {
	p := new(DeploymentState)
	*p = x
	return p
}

func (x DeploymentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentState) Descriptor() protoreflect.EnumDescriptor {
	return file_deploymentplan_proto_enumTypes[2].Descriptor()
}

func (DeploymentState) Type() protoreflect.EnumType {
	return &file_deploymentplan_proto_enumTypes[2]
}

func (x DeploymentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentState.Descriptor instead.
func (DeploymentState) EnumDescriptor() ([]byte, []int) {
	return file_deploymentplan_proto_rawDescGZIP(), []int{2}
}

// DeploymentPlanRecord represents a workload expected to be deployed.
type DeploymentPlanRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata                    *Metadata                    `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                            // Metadata identifies the Deployment.
	Name                        string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                    // Name of this Deployment.
	Status                      *DeploymentPlanStatus        `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                                                                // Status of the Deployment.
	Namespace                   string                       `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`                                                                          // Namespace of the Deployment.
	ServiceName                 string                       `protobuf:"bytes,5,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`                                                   // Name of the service associated with the Deployment.
	MatchingComputeCapabilities []*MatchingComputeCapability `protobuf:"bytes,6,rep,name=matching_compute_capabilities,json=matchingComputeCapabilities,proto3" json:"matching_compute_capabilities,omitempty"` // List of capabilities required by the Deployment.
	Applications                []*Application               `protobuf:"bytes,7,rep,name=applications,proto3" json:"applications,omitempty"`                                                                    // List of applications required by the Deployment.
	Deployments                 []*Deployment                `protobuf:"bytes,8,rep,name=deployments,proto3" json:"deployments,omitempty"`                                                                      // Instantiations of the DeploymentPlan.
}

func (x *DeploymentPlanRecord) Reset() {
	*x = DeploymentPlanRecord{}
	mi := &file_deploymentplan_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentPlanRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentPlanRecord) ProtoMessage() {}

func (x *DeploymentPlanRecord) ProtoReflect() protoreflect.Message {
	mi := &file_deploymentplan_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentPlanRecord.ProtoReflect.Descriptor instead.
func (*DeploymentPlanRecord) Descriptor() ([]byte, []int) {
	return file_deploymentplan_proto_rawDescGZIP(), []int{0}
}

func (x *DeploymentPlanRecord) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DeploymentPlanRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeploymentPlanRecord) GetStatus() *DeploymentPlanStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeploymentPlanRecord) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeploymentPlanRecord) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *DeploymentPlanRecord) GetMatchingComputeCapabilities() []*MatchingComputeCapability {
	if x != nil {
		return x.MatchingComputeCapabilities
	}
	return nil
}

func (x *DeploymentPlanRecord) GetApplications() []*Application {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *DeploymentPlanRecord) GetDeployments() []*Deployment {
	if x != nil {
		return x.Deployments
	}
	return nil
}

// DeploymentPlanStatus contains the state and message of a Deployment.
type DeploymentPlanStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   DeploymentPlanState `protobuf:"varint,1,opt,name=state,proto3,enum=proto.mrds.ledger.deploymentplan.DeploymentPlanState" json:"state,omitempty"` // State of the resource.
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                        // Human-readable description of the resource's state.
}

func (x *DeploymentPlanStatus) Reset() {
	*x = DeploymentPlanStatus{}
	mi := &file_deploymentplan_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentPlanStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentPlanStatus) ProtoMessage() {}

func (x *DeploymentPlanStatus) ProtoReflect() protoreflect.Message {
	mi := &file_deploymentplan_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentPlanStatus.ProtoReflect.Descriptor instead.
func (*DeploymentPlanStatus) Descriptor() ([]byte, []int) {
	return file_deploymentplan_proto_rawDescGZIP(), []int{1}
}

func (x *DeploymentPlanStatus) GetState() DeploymentPlanState {
	if x != nil {
		return x.State
	}
	return DeploymentPlanState_DeploymentPlanState_UNKNOWN
}

func (x *DeploymentPlanStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// MatchingComputeCapability represents the capabilities required by the Deployment.
type MatchingComputeCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CapabilityType  string     `protobuf:"bytes,1,opt,name=capability_type,json=capabilityType,proto3" json:"capability_type,omitempty"`
	Comparator      Comparator `protobuf:"varint,2,opt,name=comparator,proto3,enum=proto.mrds.ledger.deploymentplan.Comparator" json:"comparator,omitempty"`
	CapabilityNames []string   `protobuf:"bytes,3,rep,name=capability_names,json=capabilityNames,proto3" json:"capability_names,omitempty"`
}

func (x *MatchingComputeCapability) Reset() {
	*x = MatchingComputeCapability{}
	mi := &file_deploymentplan_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchingComputeCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingComputeCapability) ProtoMessage() {}

func (x *MatchingComputeCapability) ProtoReflect() protoreflect.Message {
	mi := &file_deploymentplan_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingComputeCapability.ProtoReflect.Descriptor instead.
func (*MatchingComputeCapability) Descriptor() ([]byte, []int) {
	return file_deploymentplan_proto_rawDescGZIP(), []int{2}
}

func (x *MatchingComputeCapability) GetCapabilityType() string {
	if x != nil {
		return x.CapabilityType
	}
	return ""
}

func (x *MatchingComputeCapability) GetComparator() Comparator {
	if x != nil {
		return x.Comparator
	}
	return Comparator_Comparator_IN
}

func (x *MatchingComputeCapability) GetCapabilityNames() []string {
	if x != nil {
		return x.CapabilityNames
	}
	return nil
}

// Application represents an application required by the Deployment.
type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadName       string                         `protobuf:"bytes,1,opt,name=payload_name,json=payloadName,proto3" json:"payload_name,omitempty"`
	Resources         *ApplicationResources          `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	Ports             []*ApplicationPort             `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
	PersistentVolumes []*ApplicationPersistentVolume `protobuf:"bytes,4,rep,name=persistent_volumes,json=persistentVolumes,proto3" json:"persistent_volumes,omitempty"`
}

func (x *Application) Reset() {
	*x = Application{}
	mi := &file_deploymentplan_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_deploymentplan_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_deploymentplan_proto_rawDescGZIP(), []int{3}
}

func (x *Application) GetPayloadName() string {
	if x != nil {
		return x.PayloadName
	}
	return ""
}

func (x *Application) GetResources() *ApplicationResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Application) GetPorts() []*ApplicationPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Application) GetPersistentVolumes() []*ApplicationPersistentVolume {
	if x != nil {
		return x.PersistentVolumes
	}
	return nil
}

// ApplicationResources defines the resource requirements for an application.
type ApplicationResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cores  uint32 `protobuf:"varint,1,opt,name=cores,proto3" json:"cores,omitempty"`
	Memory uint32 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *ApplicationResources) Reset() {
	*x = ApplicationResources{}
	mi := &file_deploymentplan_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationResources) ProtoMessage() {}

func (x *ApplicationResources) ProtoReflect() protoreflect.Message {
	mi := &file_deploymentplan_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationResources.ProtoReflect.Descriptor instead.
func (*ApplicationResources) Descriptor() ([]byte, []int) {
	return file_deploymentplan_proto_rawDescGZIP(), []int{4}
}

func (x *ApplicationResources) GetCores() uint32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *ApplicationResources) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

// ApplicationPort defines the port settings for an application.
type ApplicationPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port     uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ApplicationPort) Reset() {
	*x = ApplicationPort{}
	mi := &file_deploymentplan_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationPort) ProtoMessage() {}

func (x *ApplicationPort) ProtoReflect() protoreflect.Message {
	mi := &file_deploymentplan_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationPort.ProtoReflect.Descriptor instead.
func (*ApplicationPort) Descriptor() ([]byte, []int) {
	return file_deploymentplan_proto_rawDescGZIP(), []int{5}
}

func (x *ApplicationPort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ApplicationPort) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// ApplicationPersistentVolume defines a persistent volume for an application.
type ApplicationPersistentVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageClass string `protobuf:"bytes,1,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty"`
	Capacity     uint32 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	MountPath    string `protobuf:"bytes,3,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
}

func (x *ApplicationPersistentVolume) Reset() {
	*x = ApplicationPersistentVolume{}
	mi := &file_deploymentplan_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationPersistentVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationPersistentVolume) ProtoMessage() {}

func (x *ApplicationPersistentVolume) ProtoReflect() protoreflect.Message {
	mi := &file_deploymentplan_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationPersistentVolume.ProtoReflect.Descriptor instead.
func (*ApplicationPersistentVolume) Descriptor() ([]byte, []int) {
	return file_deploymentplan_proto_rawDescGZIP(), []int{6}
}

func (x *ApplicationPersistentVolume) GetStorageClass() string {
	if x != nil {
		return x.StorageClass
	}
	return ""
}

func (x *ApplicationPersistentVolume) GetCapacity() uint32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *ApplicationPersistentVolume) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

// Deployment represents an instance of the DeploymentPlan.
type Deployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                           // ID of the DeploymentPlan.
	Status             *DeploymentStatus     `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                                                   // Status of the Deployment.
	PayloadCoordinates []*PayloadCoordinates `protobuf:"bytes,3,rep,name=payload_coordinates,json=payloadCoordinates,proto3" json:"payload_coordinates,omitempty"` // Coordinates for the required payloads.
	InstanceCount      uint32                `protobuf:"varint,4,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count,omitempty"`               // Number of instances of the Deployment.
}

func (x *Deployment) Reset() {
	*x = Deployment{}
	mi := &file_deploymentplan_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment) ProtoMessage() {}

func (x *Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_deploymentplan_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment.ProtoReflect.Descriptor instead.
func (*Deployment) Descriptor() ([]byte, []int) {
	return file_deploymentplan_proto_rawDescGZIP(), []int{7}
}

func (x *Deployment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Deployment) GetStatus() *DeploymentStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Deployment) GetPayloadCoordinates() []*PayloadCoordinates {
	if x != nil {
		return x.PayloadCoordinates
	}
	return nil
}

func (x *Deployment) GetInstanceCount() uint32 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

// DeploymentStatus defines the state and message of a Deployment.
type DeploymentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   DeploymentState `protobuf:"varint,1,opt,name=state,proto3,enum=proto.mrds.ledger.deploymentplan.DeploymentState" json:"state,omitempty"` // State of the resource.
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                    // Human-readable description of the resource's state.
}

func (x *DeploymentStatus) Reset() {
	*x = DeploymentStatus{}
	mi := &file_deploymentplan_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentStatus) ProtoMessage() {}

func (x *DeploymentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_deploymentplan_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentStatus.ProtoReflect.Descriptor instead.
func (*DeploymentStatus) Descriptor() ([]byte, []int) {
	return file_deploymentplan_proto_rawDescGZIP(), []int{8}
}

func (x *DeploymentStatus) GetState() DeploymentState {
	if x != nil {
		return x.State
	}
	return DeploymentState_DeploymentState_UNKNOWN
}

func (x *DeploymentStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// PayloadCoordinates define the coordinates of a payload.
type PayloadCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadName string            `protobuf:"bytes,1,opt,name=payload_name,json=payloadName,proto3" json:"payload_name,omitempty"`
	Coordinates map[string]string `protobuf:"bytes,2,rep,name=coordinates,proto3" json:"coordinates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PayloadCoordinates) Reset() {
	*x = PayloadCoordinates{}
	mi := &file_deploymentplan_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayloadCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadCoordinates) ProtoMessage() {}

func (x *PayloadCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_deploymentplan_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadCoordinates.ProtoReflect.Descriptor instead.
func (*PayloadCoordinates) Descriptor() ([]byte, []int) {
	return file_deploymentplan_proto_rawDescGZIP(), []int{9}
}

func (x *PayloadCoordinates) GetPayloadName() string {
	if x != nil {
		return x.PayloadName
	}
	return ""
}

func (x *PayloadCoordinates) GetCoordinates() map[string]string {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

var File_deploymentplan_proto protoreflect.FileDescriptor

var file_deploymentplan_proto_rawDesc = []byte{
	0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72,
	0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x1a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x04, 0x0a, 0x14, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a,
	0x1d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64,
	0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x1b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x51,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64,
	0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x7d, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xbd, 0x01, 0x0a, 0x19, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0xbd, 0x02, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x6c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x11, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x22, 0x44, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x41, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x7d, 0x0a, 0x1b, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xf6, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x65, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x75, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64,
	0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x67, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x78, 0x0a, 0x13, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x5f, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x47, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45,
	0x5f, 0x4c, 0x54, 0x45, 0x10, 0x03, 0x2a, 0xc3, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1d, 0x0a,
	0x19, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x42, 0x0d, 0x5a, 0x0b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x72, 0x64, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_deploymentplan_proto_rawDescOnce sync.Once
	file_deploymentplan_proto_rawDescData = file_deploymentplan_proto_rawDesc
)

func file_deploymentplan_proto_rawDescGZIP() []byte {
	file_deploymentplan_proto_rawDescOnce.Do(func() {
		file_deploymentplan_proto_rawDescData = protoimpl.X.CompressGZIP(file_deploymentplan_proto_rawDescData)
	})
	return file_deploymentplan_proto_rawDescData
}

var file_deploymentplan_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_deploymentplan_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_deploymentplan_proto_goTypes = []any{
	(DeploymentPlanState)(0),            // 0: proto.mrds.ledger.deploymentplan.DeploymentPlanState
	(Comparator)(0),                     // 1: proto.mrds.ledger.deploymentplan.Comparator
	(DeploymentState)(0),                // 2: proto.mrds.ledger.deploymentplan.DeploymentState
	(*DeploymentPlanRecord)(nil),        // 3: proto.mrds.ledger.deploymentplan.DeploymentPlanRecord
	(*DeploymentPlanStatus)(nil),        // 4: proto.mrds.ledger.deploymentplan.DeploymentPlanStatus
	(*MatchingComputeCapability)(nil),   // 5: proto.mrds.ledger.deploymentplan.MatchingComputeCapability
	(*Application)(nil),                 // 6: proto.mrds.ledger.deploymentplan.Application
	(*ApplicationResources)(nil),        // 7: proto.mrds.ledger.deploymentplan.ApplicationResources
	(*ApplicationPort)(nil),             // 8: proto.mrds.ledger.deploymentplan.ApplicationPort
	(*ApplicationPersistentVolume)(nil), // 9: proto.mrds.ledger.deploymentplan.ApplicationPersistentVolume
	(*Deployment)(nil),                  // 10: proto.mrds.ledger.deploymentplan.Deployment
	(*DeploymentStatus)(nil),            // 11: proto.mrds.ledger.deploymentplan.DeploymentStatus
	(*PayloadCoordinates)(nil),          // 12: proto.mrds.ledger.deploymentplan.PayloadCoordinates
	nil,                                 // 13: proto.mrds.ledger.deploymentplan.PayloadCoordinates.CoordinatesEntry
	(*Metadata)(nil),                    // 14: proto.mrds.core.Metadata
}
var file_deploymentplan_proto_depIdxs = []int32{
	14, // 0: proto.mrds.ledger.deploymentplan.DeploymentPlanRecord.metadata:type_name -> proto.mrds.core.Metadata
	4,  // 1: proto.mrds.ledger.deploymentplan.DeploymentPlanRecord.status:type_name -> proto.mrds.ledger.deploymentplan.DeploymentPlanStatus
	5,  // 2: proto.mrds.ledger.deploymentplan.DeploymentPlanRecord.matching_compute_capabilities:type_name -> proto.mrds.ledger.deploymentplan.MatchingComputeCapability
	6,  // 3: proto.mrds.ledger.deploymentplan.DeploymentPlanRecord.applications:type_name -> proto.mrds.ledger.deploymentplan.Application
	10, // 4: proto.mrds.ledger.deploymentplan.DeploymentPlanRecord.deployments:type_name -> proto.mrds.ledger.deploymentplan.Deployment
	0,  // 5: proto.mrds.ledger.deploymentplan.DeploymentPlanStatus.state:type_name -> proto.mrds.ledger.deploymentplan.DeploymentPlanState
	1,  // 6: proto.mrds.ledger.deploymentplan.MatchingComputeCapability.comparator:type_name -> proto.mrds.ledger.deploymentplan.Comparator
	7,  // 7: proto.mrds.ledger.deploymentplan.Application.resources:type_name -> proto.mrds.ledger.deploymentplan.ApplicationResources
	8,  // 8: proto.mrds.ledger.deploymentplan.Application.ports:type_name -> proto.mrds.ledger.deploymentplan.ApplicationPort
	9,  // 9: proto.mrds.ledger.deploymentplan.Application.persistent_volumes:type_name -> proto.mrds.ledger.deploymentplan.ApplicationPersistentVolume
	11, // 10: proto.mrds.ledger.deploymentplan.Deployment.status:type_name -> proto.mrds.ledger.deploymentplan.DeploymentStatus
	12, // 11: proto.mrds.ledger.deploymentplan.Deployment.payload_coordinates:type_name -> proto.mrds.ledger.deploymentplan.PayloadCoordinates
	2,  // 12: proto.mrds.ledger.deploymentplan.DeploymentStatus.state:type_name -> proto.mrds.ledger.deploymentplan.DeploymentState
	13, // 13: proto.mrds.ledger.deploymentplan.PayloadCoordinates.coordinates:type_name -> proto.mrds.ledger.deploymentplan.PayloadCoordinates.CoordinatesEntry
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_deploymentplan_proto_init() }
func file_deploymentplan_proto_init() {
	if File_deploymentplan_proto != nil {
		return
	}
	file_metadata_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deploymentplan_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_deploymentplan_proto_goTypes,
		DependencyIndexes: file_deploymentplan_proto_depIdxs,
		EnumInfos:         file_deploymentplan_proto_enumTypes,
		MessageInfos:      file_deploymentplan_proto_msgTypes,
	}.Build()
	File_deploymentplan_proto = out.File
	file_deploymentplan_proto_rawDesc = nil
	file_deploymentplan_proto_goTypes = nil
	file_deploymentplan_proto_depIdxs = nil
}
