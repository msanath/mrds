// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: runtime_service.proto

package mrdspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Runtimes_Create_FullMethodName        = "/proto.mrds.ledger.runtime.Runtimes/Create"
	Runtimes_GetByMetadata_FullMethodName = "/proto.mrds.ledger.runtime.Runtimes/GetByMetadata"
	Runtimes_GetByName_FullMethodName     = "/proto.mrds.ledger.runtime.Runtimes/GetByName"
	Runtimes_UpdateState_FullMethodName   = "/proto.mrds.ledger.runtime.Runtimes/UpdateState"
	Runtimes_List_FullMethodName          = "/proto.mrds.ledger.runtime.Runtimes/List"
	Runtimes_Delete_FullMethodName        = "/proto.mrds.ledger.runtime.Runtimes/Delete"
)

// RuntimesClient is the client API for Runtimes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for managing Runtime records.
type RuntimesClient interface {
	// Create a new Runtime.
	Create(ctx context.Context, in *CreateRuntimeRequest, opts ...grpc.CallOption) (*CreateRuntimeResponse, error)
	// Get a Runtime by its metadata.
	GetByMetadata(ctx context.Context, in *GetRuntimeByMetadataRequest, opts ...grpc.CallOption) (*GetRuntimeResponse, error)
	// Get a Runtime by its name.
	GetByName(ctx context.Context, in *GetRuntimeByNameRequest, opts ...grpc.CallOption) (*GetRuntimeResponse, error)
	// Update the state of an existing Runtime.
	UpdateState(ctx context.Context, in *UpdateRuntimeStateRequest, opts ...grpc.CallOption) (*UpdateRuntimeResponse, error)
	// List Runtimes that match the provided filters.
	List(ctx context.Context, in *ListRuntimeRequest, opts ...grpc.CallOption) (*ListRuntimeResponse, error)
	// Delete a Runtime by its metadata.
	Delete(ctx context.Context, in *DeleteRuntimeRequest, opts ...grpc.CallOption) (*DeleteRuntimeResponse, error)
}

type runtimesClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimesClient(cc grpc.ClientConnInterface) RuntimesClient {
	return &runtimesClient{cc}
}

func (c *runtimesClient) Create(ctx context.Context, in *CreateRuntimeRequest, opts ...grpc.CallOption) (*CreateRuntimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRuntimeResponse)
	err := c.cc.Invoke(ctx, Runtimes_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimesClient) GetByMetadata(ctx context.Context, in *GetRuntimeByMetadataRequest, opts ...grpc.CallOption) (*GetRuntimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRuntimeResponse)
	err := c.cc.Invoke(ctx, Runtimes_GetByMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimesClient) GetByName(ctx context.Context, in *GetRuntimeByNameRequest, opts ...grpc.CallOption) (*GetRuntimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRuntimeResponse)
	err := c.cc.Invoke(ctx, Runtimes_GetByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimesClient) UpdateState(ctx context.Context, in *UpdateRuntimeStateRequest, opts ...grpc.CallOption) (*UpdateRuntimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRuntimeResponse)
	err := c.cc.Invoke(ctx, Runtimes_UpdateState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimesClient) List(ctx context.Context, in *ListRuntimeRequest, opts ...grpc.CallOption) (*ListRuntimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRuntimeResponse)
	err := c.cc.Invoke(ctx, Runtimes_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimesClient) Delete(ctx context.Context, in *DeleteRuntimeRequest, opts ...grpc.CallOption) (*DeleteRuntimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRuntimeResponse)
	err := c.cc.Invoke(ctx, Runtimes_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimesServer is the server API for Runtimes service.
// All implementations must embed UnimplementedRuntimesServer
// for forward compatibility.
//
// Service definition for managing Runtime records.
type RuntimesServer interface {
	// Create a new Runtime.
	Create(context.Context, *CreateRuntimeRequest) (*CreateRuntimeResponse, error)
	// Get a Runtime by its metadata.
	GetByMetadata(context.Context, *GetRuntimeByMetadataRequest) (*GetRuntimeResponse, error)
	// Get a Runtime by its name.
	GetByName(context.Context, *GetRuntimeByNameRequest) (*GetRuntimeResponse, error)
	// Update the state of an existing Runtime.
	UpdateState(context.Context, *UpdateRuntimeStateRequest) (*UpdateRuntimeResponse, error)
	// List Runtimes that match the provided filters.
	List(context.Context, *ListRuntimeRequest) (*ListRuntimeResponse, error)
	// Delete a Runtime by its metadata.
	Delete(context.Context, *DeleteRuntimeRequest) (*DeleteRuntimeResponse, error)
	mustEmbedUnimplementedRuntimesServer()
}

// UnimplementedRuntimesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRuntimesServer struct{}

func (UnimplementedRuntimesServer) Create(context.Context, *CreateRuntimeRequest) (*CreateRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRuntimesServer) GetByMetadata(context.Context, *GetRuntimeByMetadataRequest) (*GetRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByMetadata not implemented")
}
func (UnimplementedRuntimesServer) GetByName(context.Context, *GetRuntimeByNameRequest) (*GetRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedRuntimesServer) UpdateState(context.Context, *UpdateRuntimeStateRequest) (*UpdateRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (UnimplementedRuntimesServer) List(context.Context, *ListRuntimeRequest) (*ListRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRuntimesServer) Delete(context.Context, *DeleteRuntimeRequest) (*DeleteRuntimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRuntimesServer) mustEmbedUnimplementedRuntimesServer() {}
func (UnimplementedRuntimesServer) testEmbeddedByValue()                  {}

// UnsafeRuntimesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimesServer will
// result in compilation errors.
type UnsafeRuntimesServer interface {
	mustEmbedUnimplementedRuntimesServer()
}

func RegisterRuntimesServer(s grpc.ServiceRegistrar, srv RuntimesServer) {
	// If the following call pancis, it indicates UnimplementedRuntimesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Runtimes_ServiceDesc, srv)
}

func _Runtimes_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runtimes_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimesServer).Create(ctx, req.(*CreateRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtimes_GetByMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuntimeByMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimesServer).GetByMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runtimes_GetByMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimesServer).GetByMetadata(ctx, req.(*GetRuntimeByMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtimes_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuntimeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimesServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runtimes_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimesServer).GetByName(ctx, req.(*GetRuntimeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtimes_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuntimeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimesServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runtimes_UpdateState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimesServer).UpdateState(ctx, req.(*UpdateRuntimeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtimes_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runtimes_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimesServer).List(ctx, req.(*ListRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtimes_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runtimes_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimesServer).Delete(ctx, req.(*DeleteRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Runtimes_ServiceDesc is the grpc.ServiceDesc for Runtimes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runtimes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.mrds.ledger.runtime.Runtimes",
	HandlerType: (*RuntimesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Runtimes_Create_Handler,
		},
		{
			MethodName: "GetByMetadata",
			Handler:    _Runtimes_GetByMetadata_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _Runtimes_GetByName_Handler,
		},
		{
			MethodName: "UpdateState",
			Handler:    _Runtimes_UpdateState_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Runtimes_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Runtimes_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runtime_service.proto",
}
