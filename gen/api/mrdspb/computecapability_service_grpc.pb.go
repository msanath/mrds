// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: computecapability_service.proto

package mrdspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComputeCapabilities_Create_FullMethodName       = "/proto.mrds.ledger.computecapability.ComputeCapabilities/Create"
	ComputeCapabilities_GetByID_FullMethodName      = "/proto.mrds.ledger.computecapability.ComputeCapabilities/GetByID"
	ComputeCapabilities_GetByName_FullMethodName    = "/proto.mrds.ledger.computecapability.ComputeCapabilities/GetByName"
	ComputeCapabilities_UpdateStatus_FullMethodName = "/proto.mrds.ledger.computecapability.ComputeCapabilities/UpdateStatus"
	ComputeCapabilities_List_FullMethodName         = "/proto.mrds.ledger.computecapability.ComputeCapabilities/List"
	ComputeCapabilities_Delete_FullMethodName       = "/proto.mrds.ledger.computecapability.ComputeCapabilities/Delete"
)

// ComputeCapabilitiesClient is the client API for ComputeCapabilities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for managing ComputeCapability records.
type ComputeCapabilitiesClient interface {
	// Create a new ComputeCapability.
	Create(ctx context.Context, in *CreateComputeCapabilityRequest, opts ...grpc.CallOption) (*CreateComputeCapabilityResponse, error)
	// Get a ComputeCapability by its id.
	GetByID(ctx context.Context, in *GetComputeCapabilityByIDRequest, opts ...grpc.CallOption) (*GetComputeCapabilityResponse, error)
	// Get a ComputeCapability by its name.
	GetByName(ctx context.Context, in *GetComputeCapabilityByNameRequest, opts ...grpc.CallOption) (*GetComputeCapabilityResponse, error)
	// Update the state of an existing ComputeCapability.
	UpdateStatus(ctx context.Context, in *UpdateComputeCapabilityStatusRequest, opts ...grpc.CallOption) (*UpdateComputeCapabilityResponse, error)
	// List ComputeCapabilitys that match the provided filters.
	List(ctx context.Context, in *ListComputeCapabilityRequest, opts ...grpc.CallOption) (*ListComputeCapabilityResponse, error)
	// Delete a ComputeCapability by its metadata.
	Delete(ctx context.Context, in *DeleteComputeCapabilityRequest, opts ...grpc.CallOption) (*DeleteComputeCapabilityResponse, error)
}

type computeCapabilitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeCapabilitiesClient(cc grpc.ClientConnInterface) ComputeCapabilitiesClient {
	return &computeCapabilitiesClient{cc}
}

func (c *computeCapabilitiesClient) Create(ctx context.Context, in *CreateComputeCapabilityRequest, opts ...grpc.CallOption) (*CreateComputeCapabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateComputeCapabilityResponse)
	err := c.cc.Invoke(ctx, ComputeCapabilities_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeCapabilitiesClient) GetByID(ctx context.Context, in *GetComputeCapabilityByIDRequest, opts ...grpc.CallOption) (*GetComputeCapabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComputeCapabilityResponse)
	err := c.cc.Invoke(ctx, ComputeCapabilities_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeCapabilitiesClient) GetByName(ctx context.Context, in *GetComputeCapabilityByNameRequest, opts ...grpc.CallOption) (*GetComputeCapabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComputeCapabilityResponse)
	err := c.cc.Invoke(ctx, ComputeCapabilities_GetByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeCapabilitiesClient) UpdateStatus(ctx context.Context, in *UpdateComputeCapabilityStatusRequest, opts ...grpc.CallOption) (*UpdateComputeCapabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateComputeCapabilityResponse)
	err := c.cc.Invoke(ctx, ComputeCapabilities_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeCapabilitiesClient) List(ctx context.Context, in *ListComputeCapabilityRequest, opts ...grpc.CallOption) (*ListComputeCapabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListComputeCapabilityResponse)
	err := c.cc.Invoke(ctx, ComputeCapabilities_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeCapabilitiesClient) Delete(ctx context.Context, in *DeleteComputeCapabilityRequest, opts ...grpc.CallOption) (*DeleteComputeCapabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteComputeCapabilityResponse)
	err := c.cc.Invoke(ctx, ComputeCapabilities_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputeCapabilitiesServer is the server API for ComputeCapabilities service.
// All implementations must embed UnimplementedComputeCapabilitiesServer
// for forward compatibility.
//
// Service definition for managing ComputeCapability records.
type ComputeCapabilitiesServer interface {
	// Create a new ComputeCapability.
	Create(context.Context, *CreateComputeCapabilityRequest) (*CreateComputeCapabilityResponse, error)
	// Get a ComputeCapability by its id.
	GetByID(context.Context, *GetComputeCapabilityByIDRequest) (*GetComputeCapabilityResponse, error)
	// Get a ComputeCapability by its name.
	GetByName(context.Context, *GetComputeCapabilityByNameRequest) (*GetComputeCapabilityResponse, error)
	// Update the state of an existing ComputeCapability.
	UpdateStatus(context.Context, *UpdateComputeCapabilityStatusRequest) (*UpdateComputeCapabilityResponse, error)
	// List ComputeCapabilitys that match the provided filters.
	List(context.Context, *ListComputeCapabilityRequest) (*ListComputeCapabilityResponse, error)
	// Delete a ComputeCapability by its metadata.
	Delete(context.Context, *DeleteComputeCapabilityRequest) (*DeleteComputeCapabilityResponse, error)
	mustEmbedUnimplementedComputeCapabilitiesServer()
}

// UnimplementedComputeCapabilitiesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComputeCapabilitiesServer struct{}

func (UnimplementedComputeCapabilitiesServer) Create(context.Context, *CreateComputeCapabilityRequest) (*CreateComputeCapabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedComputeCapabilitiesServer) GetByID(context.Context, *GetComputeCapabilityByIDRequest) (*GetComputeCapabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedComputeCapabilitiesServer) GetByName(context.Context, *GetComputeCapabilityByNameRequest) (*GetComputeCapabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedComputeCapabilitiesServer) UpdateStatus(context.Context, *UpdateComputeCapabilityStatusRequest) (*UpdateComputeCapabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedComputeCapabilitiesServer) List(context.Context, *ListComputeCapabilityRequest) (*ListComputeCapabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedComputeCapabilitiesServer) Delete(context.Context, *DeleteComputeCapabilityRequest) (*DeleteComputeCapabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedComputeCapabilitiesServer) mustEmbedUnimplementedComputeCapabilitiesServer() {}
func (UnimplementedComputeCapabilitiesServer) testEmbeddedByValue()                             {}

// UnsafeComputeCapabilitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputeCapabilitiesServer will
// result in compilation errors.
type UnsafeComputeCapabilitiesServer interface {
	mustEmbedUnimplementedComputeCapabilitiesServer()
}

func RegisterComputeCapabilitiesServer(s grpc.ServiceRegistrar, srv ComputeCapabilitiesServer) {
	// If the following call pancis, it indicates UnimplementedComputeCapabilitiesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComputeCapabilities_ServiceDesc, srv)
}

func _ComputeCapabilities_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComputeCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeCapabilitiesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputeCapabilities_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeCapabilitiesServer).Create(ctx, req.(*CreateComputeCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeCapabilities_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComputeCapabilityByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeCapabilitiesServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputeCapabilities_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeCapabilitiesServer).GetByID(ctx, req.(*GetComputeCapabilityByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeCapabilities_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComputeCapabilityByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeCapabilitiesServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputeCapabilities_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeCapabilitiesServer).GetByName(ctx, req.(*GetComputeCapabilityByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeCapabilities_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateComputeCapabilityStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeCapabilitiesServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputeCapabilities_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeCapabilitiesServer).UpdateStatus(ctx, req.(*UpdateComputeCapabilityStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeCapabilities_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComputeCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeCapabilitiesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputeCapabilities_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeCapabilitiesServer).List(ctx, req.(*ListComputeCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeCapabilities_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteComputeCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeCapabilitiesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputeCapabilities_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeCapabilitiesServer).Delete(ctx, req.(*DeleteComputeCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComputeCapabilities_ServiceDesc is the grpc.ServiceDesc for ComputeCapabilities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComputeCapabilities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.mrds.ledger.computecapability.ComputeCapabilities",
	HandlerType: (*ComputeCapabilitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ComputeCapabilities_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _ComputeCapabilities_GetByID_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _ComputeCapabilities_GetByName_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _ComputeCapabilities_UpdateStatus_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ComputeCapabilities_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ComputeCapabilities_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "computecapability_service.proto",
}
