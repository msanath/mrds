// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: deploymentplan_service.proto

package mrdspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeploymentPlans_Create_FullMethodName                 = "/proto.mrds.ledger.deploymentplan.DeploymentPlans/Create"
	DeploymentPlans_GetByMetadata_FullMethodName          = "/proto.mrds.ledger.deploymentplan.DeploymentPlans/GetByMetadata"
	DeploymentPlans_GetByName_FullMethodName              = "/proto.mrds.ledger.deploymentplan.DeploymentPlans/GetByName"
	DeploymentPlans_UpdateStatus_FullMethodName           = "/proto.mrds.ledger.deploymentplan.DeploymentPlans/UpdateStatus"
	DeploymentPlans_List_FullMethodName                   = "/proto.mrds.ledger.deploymentplan.DeploymentPlans/List"
	DeploymentPlans_Delete_FullMethodName                 = "/proto.mrds.ledger.deploymentplan.DeploymentPlans/Delete"
	DeploymentPlans_AddDeployment_FullMethodName          = "/proto.mrds.ledger.deploymentplan.DeploymentPlans/AddDeployment"
	DeploymentPlans_UpdateDeploymentStatus_FullMethodName = "/proto.mrds.ledger.deploymentplan.DeploymentPlans/UpdateDeploymentStatus"
)

// DeploymentPlansClient is the client API for DeploymentPlans service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentPlansClient interface {
	// Create a new DeploymentPlan.
	Create(ctx context.Context, in *CreateDeploymentPlanRequest, opts ...grpc.CallOption) (*CreateDeploymentPlanResponse, error)
	// Get a DeploymentPlan by its metadata.
	GetByMetadata(ctx context.Context, in *GetDeploymentPlanByMetadataRequest, opts ...grpc.CallOption) (*GetDeploymentPlanResponse, error)
	// Get a DeploymentPlan by its name.
	GetByName(ctx context.Context, in *GetDeploymentPlanByNameRequest, opts ...grpc.CallOption) (*GetDeploymentPlanResponse, error)
	// Update the state of an existing DeploymentPlan.
	UpdateStatus(ctx context.Context, in *UpdateDeploymentPlanStatusRequest, opts ...grpc.CallOption) (*UpdateDeploymentPlanResponse, error)
	// List DeploymentPlans that match the provided filters.
	List(ctx context.Context, in *ListDeploymentPlanRequest, opts ...grpc.CallOption) (*ListDeploymentPlanResponse, error)
	// Delete a DeploymentPlan by its metadata.
	Delete(ctx context.Context, in *DeleteDeploymentPlanRequest, opts ...grpc.CallOption) (*DeleteDeploymentPlanResponse, error)
	// Add a Deployment to an existing DeploymentPlan.
	AddDeployment(ctx context.Context, in *AddDeploymentRequest, opts ...grpc.CallOption) (*UpdateDeploymentPlanResponse, error)
	// Update the status of an existing Deployment.
	UpdateDeploymentStatus(ctx context.Context, in *UpdateDeploymentStatusRequest, opts ...grpc.CallOption) (*UpdateDeploymentPlanResponse, error)
}

type deploymentPlansClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentPlansClient(cc grpc.ClientConnInterface) DeploymentPlansClient {
	return &deploymentPlansClient{cc}
}

func (c *deploymentPlansClient) Create(ctx context.Context, in *CreateDeploymentPlanRequest, opts ...grpc.CallOption) (*CreateDeploymentPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDeploymentPlanResponse)
	err := c.cc.Invoke(ctx, DeploymentPlans_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentPlansClient) GetByMetadata(ctx context.Context, in *GetDeploymentPlanByMetadataRequest, opts ...grpc.CallOption) (*GetDeploymentPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeploymentPlanResponse)
	err := c.cc.Invoke(ctx, DeploymentPlans_GetByMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentPlansClient) GetByName(ctx context.Context, in *GetDeploymentPlanByNameRequest, opts ...grpc.CallOption) (*GetDeploymentPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeploymentPlanResponse)
	err := c.cc.Invoke(ctx, DeploymentPlans_GetByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentPlansClient) UpdateStatus(ctx context.Context, in *UpdateDeploymentPlanStatusRequest, opts ...grpc.CallOption) (*UpdateDeploymentPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeploymentPlanResponse)
	err := c.cc.Invoke(ctx, DeploymentPlans_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentPlansClient) List(ctx context.Context, in *ListDeploymentPlanRequest, opts ...grpc.CallOption) (*ListDeploymentPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDeploymentPlanResponse)
	err := c.cc.Invoke(ctx, DeploymentPlans_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentPlansClient) Delete(ctx context.Context, in *DeleteDeploymentPlanRequest, opts ...grpc.CallOption) (*DeleteDeploymentPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDeploymentPlanResponse)
	err := c.cc.Invoke(ctx, DeploymentPlans_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentPlansClient) AddDeployment(ctx context.Context, in *AddDeploymentRequest, opts ...grpc.CallOption) (*UpdateDeploymentPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeploymentPlanResponse)
	err := c.cc.Invoke(ctx, DeploymentPlans_AddDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentPlansClient) UpdateDeploymentStatus(ctx context.Context, in *UpdateDeploymentStatusRequest, opts ...grpc.CallOption) (*UpdateDeploymentPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeploymentPlanResponse)
	err := c.cc.Invoke(ctx, DeploymentPlans_UpdateDeploymentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentPlansServer is the server API for DeploymentPlans service.
// All implementations must embed UnimplementedDeploymentPlansServer
// for forward compatibility.
type DeploymentPlansServer interface {
	// Create a new DeploymentPlan.
	Create(context.Context, *CreateDeploymentPlanRequest) (*CreateDeploymentPlanResponse, error)
	// Get a DeploymentPlan by its metadata.
	GetByMetadata(context.Context, *GetDeploymentPlanByMetadataRequest) (*GetDeploymentPlanResponse, error)
	// Get a DeploymentPlan by its name.
	GetByName(context.Context, *GetDeploymentPlanByNameRequest) (*GetDeploymentPlanResponse, error)
	// Update the state of an existing DeploymentPlan.
	UpdateStatus(context.Context, *UpdateDeploymentPlanStatusRequest) (*UpdateDeploymentPlanResponse, error)
	// List DeploymentPlans that match the provided filters.
	List(context.Context, *ListDeploymentPlanRequest) (*ListDeploymentPlanResponse, error)
	// Delete a DeploymentPlan by its metadata.
	Delete(context.Context, *DeleteDeploymentPlanRequest) (*DeleteDeploymentPlanResponse, error)
	// Add a Deployment to an existing DeploymentPlan.
	AddDeployment(context.Context, *AddDeploymentRequest) (*UpdateDeploymentPlanResponse, error)
	// Update the status of an existing Deployment.
	UpdateDeploymentStatus(context.Context, *UpdateDeploymentStatusRequest) (*UpdateDeploymentPlanResponse, error)
	mustEmbedUnimplementedDeploymentPlansServer()
}

// UnimplementedDeploymentPlansServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeploymentPlansServer struct{}

func (UnimplementedDeploymentPlansServer) Create(context.Context, *CreateDeploymentPlanRequest) (*CreateDeploymentPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDeploymentPlansServer) GetByMetadata(context.Context, *GetDeploymentPlanByMetadataRequest) (*GetDeploymentPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByMetadata not implemented")
}
func (UnimplementedDeploymentPlansServer) GetByName(context.Context, *GetDeploymentPlanByNameRequest) (*GetDeploymentPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedDeploymentPlansServer) UpdateStatus(context.Context, *UpdateDeploymentPlanStatusRequest) (*UpdateDeploymentPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedDeploymentPlansServer) List(context.Context, *ListDeploymentPlanRequest) (*ListDeploymentPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDeploymentPlansServer) Delete(context.Context, *DeleteDeploymentPlanRequest) (*DeleteDeploymentPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeploymentPlansServer) AddDeployment(context.Context, *AddDeploymentRequest) (*UpdateDeploymentPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeployment not implemented")
}
func (UnimplementedDeploymentPlansServer) UpdateDeploymentStatus(context.Context, *UpdateDeploymentStatusRequest) (*UpdateDeploymentPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeploymentStatus not implemented")
}
func (UnimplementedDeploymentPlansServer) mustEmbedUnimplementedDeploymentPlansServer() {}
func (UnimplementedDeploymentPlansServer) testEmbeddedByValue()                         {}

// UnsafeDeploymentPlansServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentPlansServer will
// result in compilation errors.
type UnsafeDeploymentPlansServer interface {
	mustEmbedUnimplementedDeploymentPlansServer()
}

func RegisterDeploymentPlansServer(s grpc.ServiceRegistrar, srv DeploymentPlansServer) {
	// If the following call pancis, it indicates UnimplementedDeploymentPlansServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeploymentPlans_ServiceDesc, srv)
}

func _DeploymentPlans_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentPlansServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentPlans_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentPlansServer).Create(ctx, req.(*CreateDeploymentPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentPlans_GetByMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentPlanByMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentPlansServer).GetByMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentPlans_GetByMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentPlansServer).GetByMetadata(ctx, req.(*GetDeploymentPlanByMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentPlans_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentPlanByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentPlansServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentPlans_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentPlansServer).GetByName(ctx, req.(*GetDeploymentPlanByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentPlans_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentPlanStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentPlansServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentPlans_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentPlansServer).UpdateStatus(ctx, req.(*UpdateDeploymentPlanStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentPlans_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentPlansServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentPlans_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentPlansServer).List(ctx, req.(*ListDeploymentPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentPlans_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeploymentPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentPlansServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentPlans_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentPlansServer).Delete(ctx, req.(*DeleteDeploymentPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentPlans_AddDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentPlansServer).AddDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentPlans_AddDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentPlansServer).AddDeployment(ctx, req.(*AddDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentPlans_UpdateDeploymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentPlansServer).UpdateDeploymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentPlans_UpdateDeploymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentPlansServer).UpdateDeploymentStatus(ctx, req.(*UpdateDeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeploymentPlans_ServiceDesc is the grpc.ServiceDesc for DeploymentPlans service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeploymentPlans_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.mrds.ledger.deploymentplan.DeploymentPlans",
	HandlerType: (*DeploymentPlansServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DeploymentPlans_Create_Handler,
		},
		{
			MethodName: "GetByMetadata",
			Handler:    _DeploymentPlans_GetByMetadata_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _DeploymentPlans_GetByName_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _DeploymentPlans_UpdateStatus_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DeploymentPlans_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeploymentPlans_Delete_Handler,
		},
		{
			MethodName: "AddDeployment",
			Handler:    _DeploymentPlans_AddDeployment_Handler,
		},
		{
			MethodName: "UpdateDeploymentStatus",
			Handler:    _DeploymentPlans_UpdateDeploymentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deploymentplan_service.proto",
}
