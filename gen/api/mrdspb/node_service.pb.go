// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: node_service.proto

package mrdspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to create a new Node.
type CreateNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateDomain            string     `protobuf:"bytes,2,opt,name=update_domain,json=updateDomain,proto3" json:"update_domain,omitempty"`
	TotalResources          *Resources `protobuf:"bytes,3,opt,name=total_resources,json=totalResources,proto3" json:"total_resources,omitempty"`
	SystemReservedResources *Resources `protobuf:"bytes,4,opt,name=system_reserved_resources,json=systemReservedResources,proto3" json:"system_reserved_resources,omitempty"`
}

func (x *CreateNodeRequest) Reset() {
	*x = CreateNodeRequest{}
	mi := &file_node_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeRequest) ProtoMessage() {}

func (x *CreateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeRequest) Descriptor() ([]byte, []int) {
	return file_node_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNodeRequest) GetUpdateDomain() string {
	if x != nil {
		return x.UpdateDomain
	}
	return ""
}

func (x *CreateNodeRequest) GetTotalResources() *Resources {
	if x != nil {
		return x.TotalResources
	}
	return nil
}

func (x *CreateNodeRequest) GetSystemReservedResources() *Resources {
	if x != nil {
		return x.SystemReservedResources
	}
	return nil
}

// Response after creating a new Node.
type CreateNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly created Node record.
	Record *Node `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *CreateNodeResponse) Reset() {
	*x = CreateNodeResponse{}
	mi := &file_node_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeResponse) ProtoMessage() {}

func (x *CreateNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateNodeResponse) Descriptor() ([]byte, []int) {
	return file_node_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNodeResponse) GetRecord() *Node {
	if x != nil {
		return x.Record
	}
	return nil
}

// Request to update the state and message of a Node.
type UpdateNodeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The metadata of the Node to update.
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The new state of the Node.
	Status *NodeStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// The ID of the Cluster that the Node belongs to.
	// This field is required when transitioning to the ALLOCATED state.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *UpdateNodeStatusRequest) Reset() {
	*x = UpdateNodeStatusRequest{}
	mi := &file_node_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNodeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeStatusRequest) ProtoMessage() {}

func (x *UpdateNodeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeStatusRequest) Descriptor() ([]byte, []int) {
	return file_node_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateNodeStatusRequest) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateNodeStatusRequest) GetStatus() *NodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UpdateNodeStatusRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// Response after updating the state of a Node.
type UpdateNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated Node record.
	Record *Node `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *UpdateNodeResponse) Reset() {
	*x = UpdateNodeResponse{}
	mi := &file_node_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeResponse) ProtoMessage() {}

func (x *UpdateNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeResponse.ProtoReflect.Descriptor instead.
func (*UpdateNodeResponse) Descriptor() ([]byte, []int) {
	return file_node_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateNodeResponse) GetRecord() *Node {
	if x != nil {
		return x.Record
	}
	return nil
}

type GetNodeByMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetNodeByMetadataRequest) Reset() {
	*x = GetNodeByMetadataRequest{}
	mi := &file_node_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeByMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeByMetadataRequest) ProtoMessage() {}

func (x *GetNodeByMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeByMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetNodeByMetadataRequest) Descriptor() ([]byte, []int) {
	return file_node_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetNodeByMetadataRequest) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Request for getting a Node by its name.
type GetNodeByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Node to get.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNodeByNameRequest) Reset() {
	*x = GetNodeByNameRequest{}
	mi := &file_node_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeByNameRequest) ProtoMessage() {}

func (x *GetNodeByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeByNameRequest.ProtoReflect.Descriptor instead.
func (*GetNodeByNameRequest) Descriptor() ([]byte, []int) {
	return file_node_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetNodeByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response after fetching a Node.
type GetNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Node record that was fetched.
	Record *Node `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *GetNodeResponse) Reset() {
	*x = GetNodeResponse{}
	mi := &file_node_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeResponse) ProtoMessage() {}

func (x *GetNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeResponse.ProtoReflect.Descriptor instead.
func (*GetNodeResponse) Descriptor() ([]byte, []int) {
	return file_node_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetNodeResponse) GetRecord() *Node {
	if x != nil {
		return x.Record
	}
	return nil
}

// Request to list Nodes with specific filters.
type ListNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IN condition for filtering by IDs.
	IdIn []string `protobuf:"bytes,1,rep,name=id_in,json=idIn,proto3" json:"id_in,omitempty"`
	// IN condition for filtering by Names.
	NameIn []string `protobuf:"bytes,2,rep,name=name_in,json=nameIn,proto3" json:"name_in,omitempty"`
	// Greater than or equal condition for filtering by version.
	VersionGte uint64 `protobuf:"varint,3,opt,name=version_gte,json=versionGte,proto3" json:"version_gte,omitempty"`
	// Less than or equal condition for filtering by version.
	VersionLte uint64 `protobuf:"varint,4,opt,name=version_lte,json=versionLte,proto3" json:"version_lte,omitempty"`
	// Equal condition for filtering by version.
	VersionEq uint64 `protobuf:"varint,5,opt,name=version_eq,json=versionEq,proto3" json:"version_eq,omitempty"`
	// IN condition for filtering by state.
	StateIn []NodeState `protobuf:"varint,6,rep,packed,name=state_in,json=stateIn,proto3,enum=proto.mrds.ledger.node.NodeState" json:"state_in,omitempty"`
	// NOT IN condition for filtering by state.
	StateNotIn []NodeState `protobuf:"varint,7,rep,packed,name=state_not_in,json=stateNotIn,proto3,enum=proto.mrds.ledger.node.NodeState" json:"state_not_in,omitempty"`
	// Whether to include soft-deleted resources in the query.
	IncludeDeleted bool `protobuf:"varint,8,opt,name=include_deleted,json=includeDeleted,proto3" json:"include_deleted,omitempty"`
	// Limit the number of results returned.
	Limit uint32 `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	// Filter by the ID of the Cluster that the Node belongs to.
	ClusterIdIn []string `protobuf:"bytes,10,rep,name=cluster_id_in,json=clusterIdIn,proto3" json:"cluster_id_in,omitempty"`
	// Filter by the update domain of the Node.
	UpdateDomainIn []string `protobuf:"bytes,11,rep,name=update_domain_in,json=updateDomainIn,proto3" json:"update_domain_in,omitempty"`
	// Filter by Remaining Resources.
	RemainingCoresGte  uint32 `protobuf:"varint,12,opt,name=remaining_cores_gte,json=remainingCoresGte,proto3" json:"remaining_cores_gte,omitempty"`
	RemainingCoresLte  uint32 `protobuf:"varint,13,opt,name=remaining_cores_lte,json=remainingCoresLte,proto3" json:"remaining_cores_lte,omitempty"`
	RemainingMemoryGte uint32 `protobuf:"varint,14,opt,name=remaining_memory_gte,json=remainingMemoryGte,proto3" json:"remaining_memory_gte,omitempty"`
	RemainingMemoryLte uint32 `protobuf:"varint,15,opt,name=remaining_memory_lte,json=remainingMemoryLte,proto3" json:"remaining_memory_lte,omitempty"`
}

func (x *ListNodeRequest) Reset() {
	*x = ListNodeRequest{}
	mi := &file_node_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeRequest) ProtoMessage() {}

func (x *ListNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeRequest.ProtoReflect.Descriptor instead.
func (*ListNodeRequest) Descriptor() ([]byte, []int) {
	return file_node_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListNodeRequest) GetIdIn() []string {
	if x != nil {
		return x.IdIn
	}
	return nil
}

func (x *ListNodeRequest) GetNameIn() []string {
	if x != nil {
		return x.NameIn
	}
	return nil
}

func (x *ListNodeRequest) GetVersionGte() uint64 {
	if x != nil {
		return x.VersionGte
	}
	return 0
}

func (x *ListNodeRequest) GetVersionLte() uint64 {
	if x != nil {
		return x.VersionLte
	}
	return 0
}

func (x *ListNodeRequest) GetVersionEq() uint64 {
	if x != nil {
		return x.VersionEq
	}
	return 0
}

func (x *ListNodeRequest) GetStateIn() []NodeState {
	if x != nil {
		return x.StateIn
	}
	return nil
}

func (x *ListNodeRequest) GetStateNotIn() []NodeState {
	if x != nil {
		return x.StateNotIn
	}
	return nil
}

func (x *ListNodeRequest) GetIncludeDeleted() bool {
	if x != nil {
		return x.IncludeDeleted
	}
	return false
}

func (x *ListNodeRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListNodeRequest) GetClusterIdIn() []string {
	if x != nil {
		return x.ClusterIdIn
	}
	return nil
}

func (x *ListNodeRequest) GetUpdateDomainIn() []string {
	if x != nil {
		return x.UpdateDomainIn
	}
	return nil
}

func (x *ListNodeRequest) GetRemainingCoresGte() uint32 {
	if x != nil {
		return x.RemainingCoresGte
	}
	return 0
}

func (x *ListNodeRequest) GetRemainingCoresLte() uint32 {
	if x != nil {
		return x.RemainingCoresLte
	}
	return 0
}

func (x *ListNodeRequest) GetRemainingMemoryGte() uint32 {
	if x != nil {
		return x.RemainingMemoryGte
	}
	return 0
}

func (x *ListNodeRequest) GetRemainingMemoryLte() uint32 {
	if x != nil {
		return x.RemainingMemoryLte
	}
	return 0
}

// Response for listing Nodes.
type ListNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of Node records that match the query.
	Records []*Node `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ListNodeResponse) Reset() {
	*x = ListNodeResponse{}
	mi := &file_node_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeResponse) ProtoMessage() {}

func (x *ListNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeResponse.ProtoReflect.Descriptor instead.
func (*ListNodeResponse) Descriptor() ([]byte, []int) {
	return file_node_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListNodeResponse) GetRecords() []*Node {
	if x != nil {
		return x.Records
	}
	return nil
}

// Request to delete a Node by its metadata.
type DeleteNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The metadata of the Node to delete.
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *DeleteNodeRequest) Reset() {
	*x = DeleteNodeRequest{}
	mi := &file_node_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeRequest) ProtoMessage() {}

func (x *DeleteNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) {
	return file_node_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteNodeRequest) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Response after deleting a Node.
type DeleteNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteNodeResponse) Reset() {
	*x = DeleteNodeResponse{}
	mi := &file_node_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeResponse) ProtoMessage() {}

func (x *DeleteNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteNodeResponse) Descriptor() ([]byte, []int) {
	return file_node_service_proto_rawDescGZIP(), []int{10}
}

var File_node_service_proto protoreflect.FileDescriptor

var file_node_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x0e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x22, 0x4a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xab,
	0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x51, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x72, 0x64, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x22, 0xf4, 0x04, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x69, 0x64, 0x49, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x71, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72,
	0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x49, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x5f, 0x67, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x72, 0x65, 0x73,
	0x47, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x5f, 0x6c, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x72, 0x65, 0x73,
	0x4c, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x47, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x74, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x74, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x4a, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe1, 0x04, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x5f, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64,
	0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x42, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72,
	0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x72, 0x64, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_node_service_proto_rawDescOnce sync.Once
	file_node_service_proto_rawDescData = file_node_service_proto_rawDesc
)

func file_node_service_proto_rawDescGZIP() []byte {
	file_node_service_proto_rawDescOnce.Do(func() {
		file_node_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_node_service_proto_rawDescData)
	})
	return file_node_service_proto_rawDescData
}

var file_node_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_node_service_proto_goTypes = []any{
	(*CreateNodeRequest)(nil),        // 0: proto.mrds.ledger.node.CreateNodeRequest
	(*CreateNodeResponse)(nil),       // 1: proto.mrds.ledger.node.CreateNodeResponse
	(*UpdateNodeStatusRequest)(nil),  // 2: proto.mrds.ledger.node.UpdateNodeStatusRequest
	(*UpdateNodeResponse)(nil),       // 3: proto.mrds.ledger.node.UpdateNodeResponse
	(*GetNodeByMetadataRequest)(nil), // 4: proto.mrds.ledger.node.GetNodeByMetadataRequest
	(*GetNodeByNameRequest)(nil),     // 5: proto.mrds.ledger.node.GetNodeByNameRequest
	(*GetNodeResponse)(nil),          // 6: proto.mrds.ledger.node.GetNodeResponse
	(*ListNodeRequest)(nil),          // 7: proto.mrds.ledger.node.ListNodeRequest
	(*ListNodeResponse)(nil),         // 8: proto.mrds.ledger.node.ListNodeResponse
	(*DeleteNodeRequest)(nil),        // 9: proto.mrds.ledger.node.DeleteNodeRequest
	(*DeleteNodeResponse)(nil),       // 10: proto.mrds.ledger.node.DeleteNodeResponse
	(*Resources)(nil),                // 11: proto.mrds.ledger.node.Resources
	(*Node)(nil),                     // 12: proto.mrds.ledger.node.Node
	(*Metadata)(nil),                 // 13: proto.mrds.core.Metadata
	(*NodeStatus)(nil),               // 14: proto.mrds.ledger.node.NodeStatus
	(NodeState)(0),                   // 15: proto.mrds.ledger.node.NodeState
}
var file_node_service_proto_depIdxs = []int32{
	11, // 0: proto.mrds.ledger.node.CreateNodeRequest.total_resources:type_name -> proto.mrds.ledger.node.Resources
	11, // 1: proto.mrds.ledger.node.CreateNodeRequest.system_reserved_resources:type_name -> proto.mrds.ledger.node.Resources
	12, // 2: proto.mrds.ledger.node.CreateNodeResponse.record:type_name -> proto.mrds.ledger.node.Node
	13, // 3: proto.mrds.ledger.node.UpdateNodeStatusRequest.metadata:type_name -> proto.mrds.core.Metadata
	14, // 4: proto.mrds.ledger.node.UpdateNodeStatusRequest.status:type_name -> proto.mrds.ledger.node.NodeStatus
	12, // 5: proto.mrds.ledger.node.UpdateNodeResponse.record:type_name -> proto.mrds.ledger.node.Node
	13, // 6: proto.mrds.ledger.node.GetNodeByMetadataRequest.metadata:type_name -> proto.mrds.core.Metadata
	12, // 7: proto.mrds.ledger.node.GetNodeResponse.record:type_name -> proto.mrds.ledger.node.Node
	15, // 8: proto.mrds.ledger.node.ListNodeRequest.state_in:type_name -> proto.mrds.ledger.node.NodeState
	15, // 9: proto.mrds.ledger.node.ListNodeRequest.state_not_in:type_name -> proto.mrds.ledger.node.NodeState
	12, // 10: proto.mrds.ledger.node.ListNodeResponse.records:type_name -> proto.mrds.ledger.node.Node
	13, // 11: proto.mrds.ledger.node.DeleteNodeRequest.metadata:type_name -> proto.mrds.core.Metadata
	0,  // 12: proto.mrds.ledger.node.Nodes.Create:input_type -> proto.mrds.ledger.node.CreateNodeRequest
	4,  // 13: proto.mrds.ledger.node.Nodes.GetByMetadata:input_type -> proto.mrds.ledger.node.GetNodeByMetadataRequest
	5,  // 14: proto.mrds.ledger.node.Nodes.GetByName:input_type -> proto.mrds.ledger.node.GetNodeByNameRequest
	2,  // 15: proto.mrds.ledger.node.Nodes.UpdateStatus:input_type -> proto.mrds.ledger.node.UpdateNodeStatusRequest
	7,  // 16: proto.mrds.ledger.node.Nodes.List:input_type -> proto.mrds.ledger.node.ListNodeRequest
	9,  // 17: proto.mrds.ledger.node.Nodes.Delete:input_type -> proto.mrds.ledger.node.DeleteNodeRequest
	1,  // 18: proto.mrds.ledger.node.Nodes.Create:output_type -> proto.mrds.ledger.node.CreateNodeResponse
	6,  // 19: proto.mrds.ledger.node.Nodes.GetByMetadata:output_type -> proto.mrds.ledger.node.GetNodeResponse
	6,  // 20: proto.mrds.ledger.node.Nodes.GetByName:output_type -> proto.mrds.ledger.node.GetNodeResponse
	3,  // 21: proto.mrds.ledger.node.Nodes.UpdateStatus:output_type -> proto.mrds.ledger.node.UpdateNodeResponse
	8,  // 22: proto.mrds.ledger.node.Nodes.List:output_type -> proto.mrds.ledger.node.ListNodeResponse
	10, // 23: proto.mrds.ledger.node.Nodes.Delete:output_type -> proto.mrds.ledger.node.DeleteNodeResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_node_service_proto_init() }
func file_node_service_proto_init() {
	if File_node_service_proto != nil {
		return
	}
	file_metadata_proto_init()
	file_node_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_node_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_node_service_proto_goTypes,
		DependencyIndexes: file_node_service_proto_depIdxs,
		MessageInfos:      file_node_service_proto_msgTypes,
	}.Build()
	File_node_service_proto = out.File
	file_node_service_proto_rawDesc = nil
	file_node_service_proto_goTypes = nil
	file_node_service_proto_depIdxs = nil
}
