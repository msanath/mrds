// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: metainstance_service.proto

package mrdspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetaInstances_Create_FullMethodName        = "/proto.mrds.ledger.metainstance.MetaInstances/Create"
	MetaInstances_GetByMetadata_FullMethodName = "/proto.mrds.ledger.metainstance.MetaInstances/GetByMetadata"
	MetaInstances_GetByName_FullMethodName     = "/proto.mrds.ledger.metainstance.MetaInstances/GetByName"
	MetaInstances_UpdateStatus_FullMethodName  = "/proto.mrds.ledger.metainstance.MetaInstances/UpdateStatus"
	MetaInstances_List_FullMethodName          = "/proto.mrds.ledger.metainstance.MetaInstances/List"
	MetaInstances_Delete_FullMethodName        = "/proto.mrds.ledger.metainstance.MetaInstances/Delete"
)

// MetaInstancesClient is the client API for MetaInstances service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for managing MetaInstance records.
type MetaInstancesClient interface {
	// Create a new MetaInstance.
	Create(ctx context.Context, in *CreateMetaInstanceRequest, opts ...grpc.CallOption) (*CreateMetaInstanceResponse, error)
	// Get a MetaInstance by its metadata.
	GetByMetadata(ctx context.Context, in *GetMetaInstanceByMetadataRequest, opts ...grpc.CallOption) (*GetMetaInstanceResponse, error)
	// Get a MetaInstance by its name.
	GetByName(ctx context.Context, in *GetMetaInstanceByNameRequest, opts ...grpc.CallOption) (*GetMetaInstanceResponse, error)
	// Update the state of an existing MetaInstance.
	UpdateStatus(ctx context.Context, in *UpdateMetaInstanceStatusRequest, opts ...grpc.CallOption) (*UpdateMetaInstanceResponse, error)
	// List MetaInstances that match the provided filters.
	List(ctx context.Context, in *ListMetaInstanceRequest, opts ...grpc.CallOption) (*ListMetaInstanceResponse, error)
	// Delete a MetaInstance by its metadata.
	Delete(ctx context.Context, in *DeleteMetaInstanceRequest, opts ...grpc.CallOption) (*DeleteMetaInstanceResponse, error)
}

type metaInstancesClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaInstancesClient(cc grpc.ClientConnInterface) MetaInstancesClient {
	return &metaInstancesClient{cc}
}

func (c *metaInstancesClient) Create(ctx context.Context, in *CreateMetaInstanceRequest, opts ...grpc.CallOption) (*CreateMetaInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMetaInstanceResponse)
	err := c.cc.Invoke(ctx, MetaInstances_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaInstancesClient) GetByMetadata(ctx context.Context, in *GetMetaInstanceByMetadataRequest, opts ...grpc.CallOption) (*GetMetaInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetaInstanceResponse)
	err := c.cc.Invoke(ctx, MetaInstances_GetByMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaInstancesClient) GetByName(ctx context.Context, in *GetMetaInstanceByNameRequest, opts ...grpc.CallOption) (*GetMetaInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetaInstanceResponse)
	err := c.cc.Invoke(ctx, MetaInstances_GetByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaInstancesClient) UpdateStatus(ctx context.Context, in *UpdateMetaInstanceStatusRequest, opts ...grpc.CallOption) (*UpdateMetaInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMetaInstanceResponse)
	err := c.cc.Invoke(ctx, MetaInstances_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaInstancesClient) List(ctx context.Context, in *ListMetaInstanceRequest, opts ...grpc.CallOption) (*ListMetaInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMetaInstanceResponse)
	err := c.cc.Invoke(ctx, MetaInstances_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaInstancesClient) Delete(ctx context.Context, in *DeleteMetaInstanceRequest, opts ...grpc.CallOption) (*DeleteMetaInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMetaInstanceResponse)
	err := c.cc.Invoke(ctx, MetaInstances_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaInstancesServer is the server API for MetaInstances service.
// All implementations must embed UnimplementedMetaInstancesServer
// for forward compatibility.
//
// Service definition for managing MetaInstance records.
type MetaInstancesServer interface {
	// Create a new MetaInstance.
	Create(context.Context, *CreateMetaInstanceRequest) (*CreateMetaInstanceResponse, error)
	// Get a MetaInstance by its metadata.
	GetByMetadata(context.Context, *GetMetaInstanceByMetadataRequest) (*GetMetaInstanceResponse, error)
	// Get a MetaInstance by its name.
	GetByName(context.Context, *GetMetaInstanceByNameRequest) (*GetMetaInstanceResponse, error)
	// Update the state of an existing MetaInstance.
	UpdateStatus(context.Context, *UpdateMetaInstanceStatusRequest) (*UpdateMetaInstanceResponse, error)
	// List MetaInstances that match the provided filters.
	List(context.Context, *ListMetaInstanceRequest) (*ListMetaInstanceResponse, error)
	// Delete a MetaInstance by its metadata.
	Delete(context.Context, *DeleteMetaInstanceRequest) (*DeleteMetaInstanceResponse, error)
	mustEmbedUnimplementedMetaInstancesServer()
}

// UnimplementedMetaInstancesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetaInstancesServer struct{}

func (UnimplementedMetaInstancesServer) Create(context.Context, *CreateMetaInstanceRequest) (*CreateMetaInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMetaInstancesServer) GetByMetadata(context.Context, *GetMetaInstanceByMetadataRequest) (*GetMetaInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByMetadata not implemented")
}
func (UnimplementedMetaInstancesServer) GetByName(context.Context, *GetMetaInstanceByNameRequest) (*GetMetaInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedMetaInstancesServer) UpdateStatus(context.Context, *UpdateMetaInstanceStatusRequest) (*UpdateMetaInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedMetaInstancesServer) List(context.Context, *ListMetaInstanceRequest) (*ListMetaInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMetaInstancesServer) Delete(context.Context, *DeleteMetaInstanceRequest) (*DeleteMetaInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMetaInstancesServer) mustEmbedUnimplementedMetaInstancesServer() {}
func (UnimplementedMetaInstancesServer) testEmbeddedByValue()                       {}

// UnsafeMetaInstancesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaInstancesServer will
// result in compilation errors.
type UnsafeMetaInstancesServer interface {
	mustEmbedUnimplementedMetaInstancesServer()
}

func RegisterMetaInstancesServer(s grpc.ServiceRegistrar, srv MetaInstancesServer) {
	// If the following call pancis, it indicates UnimplementedMetaInstancesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetaInstances_ServiceDesc, srv)
}

func _MetaInstances_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMetaInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaInstancesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaInstances_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaInstancesServer).Create(ctx, req.(*CreateMetaInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaInstances_GetByMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaInstanceByMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaInstancesServer).GetByMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaInstances_GetByMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaInstancesServer).GetByMetadata(ctx, req.(*GetMetaInstanceByMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaInstances_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaInstanceByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaInstancesServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaInstances_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaInstancesServer).GetByName(ctx, req.(*GetMetaInstanceByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaInstances_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetaInstanceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaInstancesServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaInstances_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaInstancesServer).UpdateStatus(ctx, req.(*UpdateMetaInstanceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaInstances_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetaInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaInstancesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaInstances_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaInstancesServer).List(ctx, req.(*ListMetaInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaInstances_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetaInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaInstancesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaInstances_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaInstancesServer).Delete(ctx, req.(*DeleteMetaInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaInstances_ServiceDesc is the grpc.ServiceDesc for MetaInstances service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaInstances_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.mrds.ledger.metainstance.MetaInstances",
	HandlerType: (*MetaInstancesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MetaInstances_Create_Handler,
		},
		{
			MethodName: "GetByMetadata",
			Handler:    _MetaInstances_GetByMetadata_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _MetaInstances_GetByName_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _MetaInstances_UpdateStatus_Handler,
		},
		{
			MethodName: "List",
			Handler:    _MetaInstances_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MetaInstances_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metainstance_service.proto",
}
