// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: node_service.proto

package mrdspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Nodes_Create_FullMethodName                 = "/proto.mrds.ledger.node.Nodes/Create"
	Nodes_GetByMetadata_FullMethodName          = "/proto.mrds.ledger.node.Nodes/GetByMetadata"
	Nodes_GetByName_FullMethodName              = "/proto.mrds.ledger.node.Nodes/GetByName"
	Nodes_UpdateStatus_FullMethodName           = "/proto.mrds.ledger.node.Nodes/UpdateStatus"
	Nodes_List_FullMethodName                   = "/proto.mrds.ledger.node.Nodes/List"
	Nodes_Delete_FullMethodName                 = "/proto.mrds.ledger.node.Nodes/Delete"
	Nodes_AddDisruption_FullMethodName          = "/proto.mrds.ledger.node.Nodes/AddDisruption"
	Nodes_UpdateDisruptionStatus_FullMethodName = "/proto.mrds.ledger.node.Nodes/UpdateDisruptionStatus"
	Nodes_RemoveDisruption_FullMethodName       = "/proto.mrds.ledger.node.Nodes/RemoveDisruption"
	Nodes_AddCapability_FullMethodName          = "/proto.mrds.ledger.node.Nodes/AddCapability"
	Nodes_RemoveCapability_FullMethodName       = "/proto.mrds.ledger.node.Nodes/RemoveCapability"
)

// NodesClient is the client API for Nodes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for managing Node records.
type NodesClient interface {
	// Create a new Node.
	Create(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error)
	// Get a Node by its metadata.
	GetByMetadata(ctx context.Context, in *GetNodeByMetadataRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	// Get a Node by its name.
	GetByName(ctx context.Context, in *GetNodeByNameRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	// Update the state of an existing Node.
	UpdateStatus(ctx context.Context, in *UpdateNodeStatusRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
	// List Nodes that match the provided filters.
	List(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodeResponse, error)
	// Delete a Node by its metadata.
	Delete(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error)
	AddDisruption(ctx context.Context, in *AddDisruptionRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
	UpdateDisruptionStatus(ctx context.Context, in *UpdateDisruptionStatusRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
	RemoveDisruption(ctx context.Context, in *RemoveDisruptionRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
	AddCapability(ctx context.Context, in *AddCapabilityRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
	RemoveCapability(ctx context.Context, in *RemoveCapabilityRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
}

type nodesClient struct {
	cc grpc.ClientConnInterface
}

func NewNodesClient(cc grpc.ClientConnInterface) NodesClient {
	return &nodesClient{cc}
}

func (c *nodesClient) Create(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNodeResponse)
	err := c.cc.Invoke(ctx, Nodes_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) GetByMetadata(ctx context.Context, in *GetNodeByMetadataRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, Nodes_GetByMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) GetByName(ctx context.Context, in *GetNodeByNameRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, Nodes_GetByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) UpdateStatus(ctx context.Context, in *UpdateNodeStatusRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, Nodes_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) List(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNodeResponse)
	err := c.cc.Invoke(ctx, Nodes_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) Delete(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNodeResponse)
	err := c.cc.Invoke(ctx, Nodes_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) AddDisruption(ctx context.Context, in *AddDisruptionRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, Nodes_AddDisruption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) UpdateDisruptionStatus(ctx context.Context, in *UpdateDisruptionStatusRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, Nodes_UpdateDisruptionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) RemoveDisruption(ctx context.Context, in *RemoveDisruptionRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, Nodes_RemoveDisruption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) AddCapability(ctx context.Context, in *AddCapabilityRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, Nodes_AddCapability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) RemoveCapability(ctx context.Context, in *RemoveCapabilityRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, Nodes_RemoveCapability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodesServer is the server API for Nodes service.
// All implementations must embed UnimplementedNodesServer
// for forward compatibility.
//
// Service definition for managing Node records.
type NodesServer interface {
	// Create a new Node.
	Create(context.Context, *CreateNodeRequest) (*CreateNodeResponse, error)
	// Get a Node by its metadata.
	GetByMetadata(context.Context, *GetNodeByMetadataRequest) (*GetNodeResponse, error)
	// Get a Node by its name.
	GetByName(context.Context, *GetNodeByNameRequest) (*GetNodeResponse, error)
	// Update the state of an existing Node.
	UpdateStatus(context.Context, *UpdateNodeStatusRequest) (*UpdateNodeResponse, error)
	// List Nodes that match the provided filters.
	List(context.Context, *ListNodeRequest) (*ListNodeResponse, error)
	// Delete a Node by its metadata.
	Delete(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error)
	AddDisruption(context.Context, *AddDisruptionRequest) (*UpdateNodeResponse, error)
	UpdateDisruptionStatus(context.Context, *UpdateDisruptionStatusRequest) (*UpdateNodeResponse, error)
	RemoveDisruption(context.Context, *RemoveDisruptionRequest) (*UpdateNodeResponse, error)
	AddCapability(context.Context, *AddCapabilityRequest) (*UpdateNodeResponse, error)
	RemoveCapability(context.Context, *RemoveCapabilityRequest) (*UpdateNodeResponse, error)
	mustEmbedUnimplementedNodesServer()
}

// UnimplementedNodesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodesServer struct{}

func (UnimplementedNodesServer) Create(context.Context, *CreateNodeRequest) (*CreateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNodesServer) GetByMetadata(context.Context, *GetNodeByMetadataRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByMetadata not implemented")
}
func (UnimplementedNodesServer) GetByName(context.Context, *GetNodeByNameRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedNodesServer) UpdateStatus(context.Context, *UpdateNodeStatusRequest) (*UpdateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedNodesServer) List(context.Context, *ListNodeRequest) (*ListNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNodesServer) Delete(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNodesServer) AddDisruption(context.Context, *AddDisruptionRequest) (*UpdateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDisruption not implemented")
}
func (UnimplementedNodesServer) UpdateDisruptionStatus(context.Context, *UpdateDisruptionStatusRequest) (*UpdateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDisruptionStatus not implemented")
}
func (UnimplementedNodesServer) RemoveDisruption(context.Context, *RemoveDisruptionRequest) (*UpdateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDisruption not implemented")
}
func (UnimplementedNodesServer) AddCapability(context.Context, *AddCapabilityRequest) (*UpdateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCapability not implemented")
}
func (UnimplementedNodesServer) RemoveCapability(context.Context, *RemoveCapabilityRequest) (*UpdateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCapability not implemented")
}
func (UnimplementedNodesServer) mustEmbedUnimplementedNodesServer() {}
func (UnimplementedNodesServer) testEmbeddedByValue()               {}

// UnsafeNodesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodesServer will
// result in compilation errors.
type UnsafeNodesServer interface {
	mustEmbedUnimplementedNodesServer()
}

func RegisterNodesServer(s grpc.ServiceRegistrar, srv NodesServer) {
	// If the following call pancis, it indicates UnimplementedNodesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Nodes_ServiceDesc, srv)
}

func _Nodes_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nodes_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).Create(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_GetByMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeByMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).GetByMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nodes_GetByMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).GetByMetadata(ctx, req.(*GetNodeByMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nodes_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).GetByName(ctx, req.(*GetNodeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nodes_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).UpdateStatus(ctx, req.(*UpdateNodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nodes_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).List(ctx, req.(*ListNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nodes_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).Delete(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_AddDisruption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDisruptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).AddDisruption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nodes_AddDisruption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).AddDisruption(ctx, req.(*AddDisruptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_UpdateDisruptionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDisruptionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).UpdateDisruptionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nodes_UpdateDisruptionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).UpdateDisruptionStatus(ctx, req.(*UpdateDisruptionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_RemoveDisruption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDisruptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).RemoveDisruption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nodes_RemoveDisruption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).RemoveDisruption(ctx, req.(*RemoveDisruptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_AddCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).AddCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nodes_AddCapability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).AddCapability(ctx, req.(*AddCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_RemoveCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).RemoveCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nodes_RemoveCapability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).RemoveCapability(ctx, req.(*RemoveCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nodes_ServiceDesc is the grpc.ServiceDesc for Nodes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nodes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.mrds.ledger.node.Nodes",
	HandlerType: (*NodesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Nodes_Create_Handler,
		},
		{
			MethodName: "GetByMetadata",
			Handler:    _Nodes_GetByMetadata_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _Nodes_GetByName_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _Nodes_UpdateStatus_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Nodes_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Nodes_Delete_Handler,
		},
		{
			MethodName: "AddDisruption",
			Handler:    _Nodes_AddDisruption_Handler,
		},
		{
			MethodName: "UpdateDisruptionStatus",
			Handler:    _Nodes_UpdateDisruptionStatus_Handler,
		},
		{
			MethodName: "RemoveDisruption",
			Handler:    _Nodes_RemoveDisruption_Handler,
		},
		{
			MethodName: "AddCapability",
			Handler:    _Nodes_AddCapability_Handler,
		},
		{
			MethodName: "RemoveCapability",
			Handler:    _Nodes_RemoveCapability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node_service.proto",
}
