// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: metainstance.proto

package mrdspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum to represent the MetaInstanceState
type MetaInstanceState int32

const (
	MetaInstanceState_MetaInstanceState_UNKNOWN            MetaInstanceState = 0
	MetaInstanceState_MetaInstanceState_PENDING_ALLOCATION MetaInstanceState = 1
	MetaInstanceState_MetaInstanceState_RUNNING            MetaInstanceState = 2
	MetaInstanceState_MetaInstanceState_TERMINATED         MetaInstanceState = 3
)

// Enum value maps for MetaInstanceState.
var (
	MetaInstanceState_name = map[int32]string{
		0: "MetaInstanceState_UNKNOWN",
		1: "MetaInstanceState_PENDING_ALLOCATION",
		2: "MetaInstanceState_RUNNING",
		3: "MetaInstanceState_TERMINATED",
	}
	MetaInstanceState_value = map[string]int32{
		"MetaInstanceState_UNKNOWN":            0,
		"MetaInstanceState_PENDING_ALLOCATION": 1,
		"MetaInstanceState_RUNNING":            2,
		"MetaInstanceState_TERMINATED":         3,
	}
)

func (x MetaInstanceState) Enum() *MetaInstanceState {
	p := new(MetaInstanceState)
	*p = x
	return p
}

func (x MetaInstanceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetaInstanceState) Descriptor() protoreflect.EnumDescriptor {
	return file_metainstance_proto_enumTypes[0].Descriptor()
}

func (MetaInstanceState) Type() protoreflect.EnumType {
	return &file_metainstance_proto_enumTypes[0]
}

func (x MetaInstanceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetaInstanceState.Descriptor instead.
func (MetaInstanceState) EnumDescriptor() ([]byte, []int) {
	return file_metainstance_proto_rawDescGZIP(), []int{0}
}

// Enum to represent the RuntimeInstanceState
type RuntimeInstanceState int32

const (
	RuntimeInstanceState_RuntimeState_UNKNOWN     RuntimeInstanceState = 0
	RuntimeInstanceState_RuntimeState_PENDING     RuntimeInstanceState = 1
	RuntimeInstanceState_RuntimeState_STARTING    RuntimeInstanceState = 2
	RuntimeInstanceState_RuntimeState_RUNNING     RuntimeInstanceState = 3
	RuntimeInstanceState_RuuntimeState_UPDATING   RuntimeInstanceState = 4
	RuntimeInstanceState_RuntimeState_TERMINATING RuntimeInstanceState = 5
	RuntimeInstanceState_RuntimeState_TERMINATED  RuntimeInstanceState = 6
	RuntimeInstanceState_RuntimeState_FAILED      RuntimeInstanceState = 7
)

// Enum value maps for RuntimeInstanceState.
var (
	RuntimeInstanceState_name = map[int32]string{
		0: "RuntimeState_UNKNOWN",
		1: "RuntimeState_PENDING",
		2: "RuntimeState_STARTING",
		3: "RuntimeState_RUNNING",
		4: "RuuntimeState_UPDATING",
		5: "RuntimeState_TERMINATING",
		6: "RuntimeState_TERMINATED",
		7: "RuntimeState_FAILED",
	}
	RuntimeInstanceState_value = map[string]int32{
		"RuntimeState_UNKNOWN":     0,
		"RuntimeState_PENDING":     1,
		"RuntimeState_STARTING":    2,
		"RuntimeState_RUNNING":     3,
		"RuuntimeState_UPDATING":   4,
		"RuntimeState_TERMINATING": 5,
		"RuntimeState_TERMINATED":  6,
		"RuntimeState_FAILED":      7,
	}
)

func (x RuntimeInstanceState) Enum() *RuntimeInstanceState {
	p := new(RuntimeInstanceState)
	*p = x
	return p
}

func (x RuntimeInstanceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeInstanceState) Descriptor() protoreflect.EnumDescriptor {
	return file_metainstance_proto_enumTypes[1].Descriptor()
}

func (RuntimeInstanceState) Type() protoreflect.EnumType {
	return &file_metainstance_proto_enumTypes[1]
}

func (x RuntimeInstanceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeInstanceState.Descriptor instead.
func (RuntimeInstanceState) EnumDescriptor() ([]byte, []int) {
	return file_metainstance_proto_rawDescGZIP(), []int{1}
}

type OperationType int32

const (
	OperationType_OperationType_UNKNOWN  OperationType = 0
	OperationType_OperationType_CREATE   OperationType = 1
	OperationType_OperationType_UPDATE   OperationType = 2
	OperationType_OperationType_DELETE   OperationType = 3
	OperationType_OperationType_STOP     OperationType = 4
	OperationType_OperationType_RESTART  OperationType = 5
	OperationType_OperationType_RELOCATE OperationType = 6
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0: "OperationType_UNKNOWN",
		1: "OperationType_CREATE",
		2: "OperationType_UPDATE",
		3: "OperationType_DELETE",
		4: "OperationType_STOP",
		5: "OperationType_RESTART",
		6: "OperationType_RELOCATE",
	}
	OperationType_value = map[string]int32{
		"OperationType_UNKNOWN":  0,
		"OperationType_CREATE":   1,
		"OperationType_UPDATE":   2,
		"OperationType_DELETE":   3,
		"OperationType_STOP":     4,
		"OperationType_RESTART":  5,
		"OperationType_RELOCATE": 6,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_metainstance_proto_enumTypes[2].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_metainstance_proto_enumTypes[2]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_metainstance_proto_rawDescGZIP(), []int{2}
}

// Enum to represent the OperationState
type OperationState int32

const (
	OperationState_OperationState_UNKNOWN          OperationState = 0
	OperationState_OperationState_PENDING          OperationState = 1
	OperationState_OperationState_PREPARING        OperationState = 2
	OperationState_OperationState_PENDING_APPROVAL OperationState = 3
	OperationState_OperationState_APPROVED         OperationState = 4
	OperationState_OperationState_SUCCEEDED        OperationState = 5
	OperationState_OperationState_FAILED           OperationState = 6
)

// Enum value maps for OperationState.
var (
	OperationState_name = map[int32]string{
		0: "OperationState_UNKNOWN",
		1: "OperationState_PENDING",
		2: "OperationState_PREPARING",
		3: "OperationState_PENDING_APPROVAL",
		4: "OperationState_APPROVED",
		5: "OperationState_SUCCEEDED",
		6: "OperationState_FAILED",
	}
	OperationState_value = map[string]int32{
		"OperationState_UNKNOWN":          0,
		"OperationState_PENDING":          1,
		"OperationState_PREPARING":        2,
		"OperationState_PENDING_APPROVAL": 3,
		"OperationState_APPROVED":         4,
		"OperationState_SUCCEEDED":        5,
		"OperationState_FAILED":           6,
	}
)

func (x OperationState) Enum() *OperationState {
	p := new(OperationState)
	*p = x
	return p
}

func (x OperationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationState) Descriptor() protoreflect.EnumDescriptor {
	return file_metainstance_proto_enumTypes[3].Descriptor()
}

func (OperationState) Type() protoreflect.EnumType {
	return &file_metainstance_proto_enumTypes[3]
}

func (x OperationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationState.Descriptor instead.
func (OperationState) EnumDescriptor() ([]byte, []int) {
	return file_metainstance_proto_rawDescGZIP(), []int{3}
}

// Message representing the MetaInstance
type MetaInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata is the metadata that identifies the MetaInstance.
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Name is the name of the MetaInstance.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Status represents the current status of the MetaInstance.
	Status *MetaInstanceStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// DeploymentPlanID is the ID of the Deployment Plan to which the MetaInstance belongs.
	DeploymentPlanId string `protobuf:"bytes,4,opt,name=deployment_plan_id,json=deploymentPlanId,proto3" json:"deployment_plan_id,omitempty"`
	// DeploymentID is the ID of the Deployment which this MetaInstance is responsible for.
	DeploymentId string `protobuf:"bytes,5,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// RuntimeInstances is a list of runtime instances currently running on the MetaInstance.
	RuntimeInstances []*RuntimeInstance `protobuf:"bytes,6,rep,name=runtime_instances,json=runtimeInstances,proto3" json:"runtime_instances,omitempty"`
	// Operations is a list of operations that are currently pending on the MetaInstance.
	Operations []*Operation `protobuf:"bytes,7,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *MetaInstance) Reset() {
	*x = MetaInstance{}
	mi := &file_metainstance_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetaInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaInstance) ProtoMessage() {}

func (x *MetaInstance) ProtoReflect() protoreflect.Message {
	mi := &file_metainstance_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaInstance.ProtoReflect.Descriptor instead.
func (*MetaInstance) Descriptor() ([]byte, []int) {
	return file_metainstance_proto_rawDescGZIP(), []int{0}
}

func (x *MetaInstance) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MetaInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetaInstance) GetStatus() *MetaInstanceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MetaInstance) GetDeploymentPlanId() string {
	if x != nil {
		return x.DeploymentPlanId
	}
	return ""
}

func (x *MetaInstance) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *MetaInstance) GetRuntimeInstances() []*RuntimeInstance {
	if x != nil {
		return x.RuntimeInstances
	}
	return nil
}

func (x *MetaInstance) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

// Message representing the Status of a MetaInstance.
type MetaInstanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State is the discrete condition of the resource.
	State MetaInstanceState `protobuf:"varint,1,opt,name=state,proto3,enum=proto.mrds.ledger.metainstance.MetaInstanceState" json:"state,omitempty"`
	// Message is a human-readable description of the resource's state.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MetaInstanceStatus) Reset() {
	*x = MetaInstanceStatus{}
	mi := &file_metainstance_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetaInstanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaInstanceStatus) ProtoMessage() {}

func (x *MetaInstanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_metainstance_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaInstanceStatus.ProtoReflect.Descriptor instead.
func (*MetaInstanceStatus) Descriptor() ([]byte, []int) {
	return file_metainstance_proto_rawDescGZIP(), []int{1}
}

func (x *MetaInstanceStatus) GetState() MetaInstanceState {
	if x != nil {
		return x.State
	}
	return MetaInstanceState_MetaInstanceState_UNKNOWN
}

func (x *MetaInstanceStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Message representing a RuntimeInstance
type RuntimeInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of the RuntimeInstance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// NodeID is the ID of the Node where the RuntimeInstance is running.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// IsActive indicates if the RuntimeInstance is currently active.
	IsActive bool `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Status represents the current status of the RuntimeInstance.
	Status *RuntimeInstanceStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RuntimeInstance) Reset() {
	*x = RuntimeInstance{}
	mi := &file_metainstance_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeInstance) ProtoMessage() {}

func (x *RuntimeInstance) ProtoReflect() protoreflect.Message {
	mi := &file_metainstance_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeInstance.ProtoReflect.Descriptor instead.
func (*RuntimeInstance) Descriptor() ([]byte, []int) {
	return file_metainstance_proto_rawDescGZIP(), []int{2}
}

func (x *RuntimeInstance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RuntimeInstance) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RuntimeInstance) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *RuntimeInstance) GetStatus() *RuntimeInstanceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Message representing the Status of a RuntimeInstance
type RuntimeInstanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State is the state of the RuntimeInstance.
	State RuntimeInstanceState `protobuf:"varint,1,opt,name=state,proto3,enum=proto.mrds.ledger.metainstance.RuntimeInstanceState" json:"state,omitempty"`
	// Message is a human-readable description of the RuntimeInstance's state.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RuntimeInstanceStatus) Reset() {
	*x = RuntimeInstanceStatus{}
	mi := &file_metainstance_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeInstanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeInstanceStatus) ProtoMessage() {}

func (x *RuntimeInstanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_metainstance_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeInstanceStatus.ProtoReflect.Descriptor instead.
func (*RuntimeInstanceStatus) Descriptor() ([]byte, []int) {
	return file_metainstance_proto_rawDescGZIP(), []int{3}
}

func (x *RuntimeInstanceStatus) GetState() RuntimeInstanceState {
	if x != nil {
		return x.State
	}
	return RuntimeInstanceState_RuntimeState_UNKNOWN
}

func (x *RuntimeInstanceStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Message representing an Operation
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of the Operation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type is the type of the Operation.
	Type OperationType `protobuf:"varint,2,opt,name=type,proto3,enum=proto.mrds.ledger.metainstance.OperationType" json:"type,omitempty"`
	// IntentID is the ID of the intent that triggered this Operation.
	IntentId string `protobuf:"bytes,3,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	// Status represents the current status of the Operation.
	Status *OperationStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	mi := &file_metainstance_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_metainstance_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_metainstance_proto_rawDescGZIP(), []int{4}
}

func (x *Operation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Operation) GetType() OperationType {
	if x != nil {
		return x.Type
	}
	return OperationType_OperationType_UNKNOWN
}

func (x *Operation) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

func (x *Operation) GetStatus() *OperationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Message representing the Status of an Operation
type OperationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State is the state of the Operation.
	State OperationState `protobuf:"varint,1,opt,name=state,proto3,enum=proto.mrds.ledger.metainstance.OperationState" json:"state,omitempty"`
	// Message is a human-readable description of the Operation's state.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *OperationStatus) Reset() {
	*x = OperationStatus{}
	mi := &file_metainstance_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationStatus) ProtoMessage() {}

func (x *OperationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_metainstance_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationStatus.ProtoReflect.Descriptor instead.
func (*OperationStatus) Descriptor() ([]byte, []int) {
	return file_metainstance_proto_rawDescGZIP(), []int{5}
}

func (x *OperationStatus) GetState() OperationState {
	if x != nil {
		return x.State
	}
	return OperationState_OperationState_UNKNOWN
}

func (x *OperationStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_metainstance_proto protoreflect.FileDescriptor

var file_metainstance_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x1a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x03, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x72, 0x64, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x5c, 0x0a, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x49, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x77, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x61,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7d, 0x0a, 0x15, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x09, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72,
	0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x72, 0x64, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x71, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x72, 0x64, 0x73, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2a, 0x9d, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x65, 0x74,
	0x61, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x65, 0x74, 0x61,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0xef, 0x01, 0x0a, 0x14, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x75, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x07, 0x2a, 0xc7, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x10, 0x06, 0x2a,
	0xe1, 0x01, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x52, 0x45,
	0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x1b, 0x0a,
	0x17, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x06, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x72, 0x64, 0x73,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metainstance_proto_rawDescOnce sync.Once
	file_metainstance_proto_rawDescData = file_metainstance_proto_rawDesc
)

func file_metainstance_proto_rawDescGZIP() []byte {
	file_metainstance_proto_rawDescOnce.Do(func() {
		file_metainstance_proto_rawDescData = protoimpl.X.CompressGZIP(file_metainstance_proto_rawDescData)
	})
	return file_metainstance_proto_rawDescData
}

var file_metainstance_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_metainstance_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_metainstance_proto_goTypes = []any{
	(MetaInstanceState)(0),        // 0: proto.mrds.ledger.metainstance.MetaInstanceState
	(RuntimeInstanceState)(0),     // 1: proto.mrds.ledger.metainstance.RuntimeInstanceState
	(OperationType)(0),            // 2: proto.mrds.ledger.metainstance.OperationType
	(OperationState)(0),           // 3: proto.mrds.ledger.metainstance.OperationState
	(*MetaInstance)(nil),          // 4: proto.mrds.ledger.metainstance.MetaInstance
	(*MetaInstanceStatus)(nil),    // 5: proto.mrds.ledger.metainstance.MetaInstanceStatus
	(*RuntimeInstance)(nil),       // 6: proto.mrds.ledger.metainstance.RuntimeInstance
	(*RuntimeInstanceStatus)(nil), // 7: proto.mrds.ledger.metainstance.RuntimeInstanceStatus
	(*Operation)(nil),             // 8: proto.mrds.ledger.metainstance.Operation
	(*OperationStatus)(nil),       // 9: proto.mrds.ledger.metainstance.OperationStatus
	(*Metadata)(nil),              // 10: proto.mrds.core.Metadata
}
var file_metainstance_proto_depIdxs = []int32{
	10, // 0: proto.mrds.ledger.metainstance.MetaInstance.metadata:type_name -> proto.mrds.core.Metadata
	5,  // 1: proto.mrds.ledger.metainstance.MetaInstance.status:type_name -> proto.mrds.ledger.metainstance.MetaInstanceStatus
	6,  // 2: proto.mrds.ledger.metainstance.MetaInstance.runtime_instances:type_name -> proto.mrds.ledger.metainstance.RuntimeInstance
	8,  // 3: proto.mrds.ledger.metainstance.MetaInstance.operations:type_name -> proto.mrds.ledger.metainstance.Operation
	0,  // 4: proto.mrds.ledger.metainstance.MetaInstanceStatus.state:type_name -> proto.mrds.ledger.metainstance.MetaInstanceState
	7,  // 5: proto.mrds.ledger.metainstance.RuntimeInstance.status:type_name -> proto.mrds.ledger.metainstance.RuntimeInstanceStatus
	1,  // 6: proto.mrds.ledger.metainstance.RuntimeInstanceStatus.state:type_name -> proto.mrds.ledger.metainstance.RuntimeInstanceState
	2,  // 7: proto.mrds.ledger.metainstance.Operation.type:type_name -> proto.mrds.ledger.metainstance.OperationType
	9,  // 8: proto.mrds.ledger.metainstance.Operation.status:type_name -> proto.mrds.ledger.metainstance.OperationStatus
	3,  // 9: proto.mrds.ledger.metainstance.OperationStatus.state:type_name -> proto.mrds.ledger.metainstance.OperationState
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_metainstance_proto_init() }
func file_metainstance_proto_init() {
	if File_metainstance_proto != nil {
		return
	}
	file_metadata_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metainstance_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metainstance_proto_goTypes,
		DependencyIndexes: file_metainstance_proto_depIdxs,
		EnumInfos:         file_metainstance_proto_enumTypes,
		MessageInfos:      file_metainstance_proto_msgTypes,
	}.Build()
	File_metainstance_proto = out.File
	file_metainstance_proto_rawDesc = nil
	file_metainstance_proto_goTypes = nil
	file_metainstance_proto_depIdxs = nil
}
