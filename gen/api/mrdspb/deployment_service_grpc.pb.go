// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: deployment_service.proto

package mrdspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Deployments_Create_FullMethodName        = "/proto.mrds.ledger.deployment.Deployments/Create"
	Deployments_GetByMetadata_FullMethodName = "/proto.mrds.ledger.deployment.Deployments/GetByMetadata"
	Deployments_GetByName_FullMethodName     = "/proto.mrds.ledger.deployment.Deployments/GetByName"
	Deployments_UpdateStatus_FullMethodName  = "/proto.mrds.ledger.deployment.Deployments/UpdateStatus"
	Deployments_List_FullMethodName          = "/proto.mrds.ledger.deployment.Deployments/List"
	Deployments_Delete_FullMethodName        = "/proto.mrds.ledger.deployment.Deployments/Delete"
)

// DeploymentsClient is the client API for Deployments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for managing Deployment records.
type DeploymentsClient interface {
	// Create a new Deployment.
	Create(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error)
	// Get a Deployment by its metadata.
	GetByMetadata(ctx context.Context, in *GetDeploymentByMetadataRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error)
	// Get a Deployment by its name.
	GetByName(ctx context.Context, in *GetDeploymentByNameRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error)
	// Update the state of an existing Deployment.
	UpdateStatus(ctx context.Context, in *UpdateDeploymentStatusRequest, opts ...grpc.CallOption) (*UpdateDeploymentResponse, error)
	// List Deployments that match the provided filters.
	List(ctx context.Context, in *ListDeploymentRequest, opts ...grpc.CallOption) (*ListDeploymentResponse, error)
	// Delete a Deployment by its metadata.
	Delete(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*DeleteDeploymentResponse, error)
}

type deploymentsClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentsClient(cc grpc.ClientConnInterface) DeploymentsClient {
	return &deploymentsClient{cc}
}

func (c *deploymentsClient) Create(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDeploymentResponse)
	err := c.cc.Invoke(ctx, Deployments_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsClient) GetByMetadata(ctx context.Context, in *GetDeploymentByMetadataRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeploymentResponse)
	err := c.cc.Invoke(ctx, Deployments_GetByMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsClient) GetByName(ctx context.Context, in *GetDeploymentByNameRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeploymentResponse)
	err := c.cc.Invoke(ctx, Deployments_GetByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsClient) UpdateStatus(ctx context.Context, in *UpdateDeploymentStatusRequest, opts ...grpc.CallOption) (*UpdateDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeploymentResponse)
	err := c.cc.Invoke(ctx, Deployments_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsClient) List(ctx context.Context, in *ListDeploymentRequest, opts ...grpc.CallOption) (*ListDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDeploymentResponse)
	err := c.cc.Invoke(ctx, Deployments_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsClient) Delete(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*DeleteDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDeploymentResponse)
	err := c.cc.Invoke(ctx, Deployments_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentsServer is the server API for Deployments service.
// All implementations must embed UnimplementedDeploymentsServer
// for forward compatibility.
//
// Service definition for managing Deployment records.
type DeploymentsServer interface {
	// Create a new Deployment.
	Create(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error)
	// Get a Deployment by its metadata.
	GetByMetadata(context.Context, *GetDeploymentByMetadataRequest) (*GetDeploymentResponse, error)
	// Get a Deployment by its name.
	GetByName(context.Context, *GetDeploymentByNameRequest) (*GetDeploymentResponse, error)
	// Update the state of an existing Deployment.
	UpdateStatus(context.Context, *UpdateDeploymentStatusRequest) (*UpdateDeploymentResponse, error)
	// List Deployments that match the provided filters.
	List(context.Context, *ListDeploymentRequest) (*ListDeploymentResponse, error)
	// Delete a Deployment by its metadata.
	Delete(context.Context, *DeleteDeploymentRequest) (*DeleteDeploymentResponse, error)
	mustEmbedUnimplementedDeploymentsServer()
}

// UnimplementedDeploymentsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeploymentsServer struct{}

func (UnimplementedDeploymentsServer) Create(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDeploymentsServer) GetByMetadata(context.Context, *GetDeploymentByMetadataRequest) (*GetDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByMetadata not implemented")
}
func (UnimplementedDeploymentsServer) GetByName(context.Context, *GetDeploymentByNameRequest) (*GetDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedDeploymentsServer) UpdateStatus(context.Context, *UpdateDeploymentStatusRequest) (*UpdateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedDeploymentsServer) List(context.Context, *ListDeploymentRequest) (*ListDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDeploymentsServer) Delete(context.Context, *DeleteDeploymentRequest) (*DeleteDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeploymentsServer) mustEmbedUnimplementedDeploymentsServer() {}
func (UnimplementedDeploymentsServer) testEmbeddedByValue()                     {}

// UnsafeDeploymentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentsServer will
// result in compilation errors.
type UnsafeDeploymentsServer interface {
	mustEmbedUnimplementedDeploymentsServer()
}

func RegisterDeploymentsServer(s grpc.ServiceRegistrar, srv DeploymentsServer) {
	// If the following call pancis, it indicates UnimplementedDeploymentsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Deployments_ServiceDesc, srv)
}

func _Deployments_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployments_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).Create(ctx, req.(*CreateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployments_GetByMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentByMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).GetByMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployments_GetByMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).GetByMetadata(ctx, req.(*GetDeploymentByMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployments_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployments_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).GetByName(ctx, req.(*GetDeploymentByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployments_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployments_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).UpdateStatus(ctx, req.(*UpdateDeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployments_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployments_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).List(ctx, req.(*ListDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployments_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployments_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).Delete(ctx, req.(*DeleteDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Deployments_ServiceDesc is the grpc.ServiceDesc for Deployments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deployments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.mrds.ledger.deployment.Deployments",
	HandlerType: (*DeploymentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Deployments_Create_Handler,
		},
		{
			MethodName: "GetByMetadata",
			Handler:    _Deployments_GetByMetadata_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _Deployments_GetByName_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _Deployments_UpdateStatus_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Deployments_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Deployments_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deployment_service.proto",
}
