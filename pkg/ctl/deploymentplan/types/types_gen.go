// Code generated by msanath/gondolf/cligen. DO NOT EDIT.

package types

import (
	"fmt"
	"slices"
	"sort"
	"strconv"
	"strings"

	"github.com/msanath/gondolf/pkg/printer"
)

const (
	ColumnNodeId      = "node_id"
	ColumnVersion     = "version"
	ColumnIsDeleted   = "is_deleted"
	ColumnName        = "name"
	ColumnState       = "state"
	ColumnMessage     = "message"
	ColumnNamespace   = "namespace"
	ColumnServiceName = "service_name"
)

func GetDisplayDeploymentPlanColumnTags() []string {
	return []string{
		ColumnNodeId,
		ColumnVersion,
		ColumnIsDeleted,
		ColumnName,
		ColumnState,
		ColumnMessage,
		ColumnNamespace,
		ColumnServiceName,
	}
}

func ValidateDisplayDeploymentPlanColumnTags(tags []string) error {
	validTags := GetDisplayDeploymentPlanColumnTags()
	for _, tag := range tags {
		if !slices.Contains(validTags, tag) {
			return fmt.Errorf("column tag '%s' not found. Valid tags are %v", tag, validTags)
		}
	}
	return nil
}

func (n *DisplayDeploymentPlan) GetDisplayFieldFromColumnTag(columnTag string) (printer.DisplayField, error) {
	switch columnTag {
	case ColumnNodeId:
		return n.Metadata.GetID(), nil
	case ColumnVersion:
		return n.Metadata.GetVersion(), nil
	case ColumnIsDeleted:
		return n.Metadata.GetIsDeleted(), nil
	case ColumnName:
		return n.GetName(), nil
	case ColumnState:
		return n.Status.GetState(), nil
	case ColumnMessage:
		return n.Status.GetMessage(), nil
	case ColumnNamespace:
		return n.GetNamespace(), nil
	case ColumnServiceName:
		return n.GetServiceName(), nil
	}
	return printer.DisplayField{}, fmt.Errorf("column tag '%s' not found. Valid tags are %v", columnTag, GetDisplayDeploymentPlanColumnTags())
}

func (n *DisplayMetadata) GetVersion() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Version",
		ColumnTag:   "version",
		Value: func() string {
			str := strconv.Itoa(n.Version)
			return str
		},
	}
}

func (n *DisplayApplicationResources) GetCores() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Cores",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.Cores)
			return str
		},
	}
}

func (n *DisplayApplicationResources) GetMemory() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Memory (MB)",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.Memory)
			return str
		},
	}
}

func (n *DisplayApplicationPort) GetPort() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Port",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.Port)
			return str
		},
	}
}

func (n *DisplayApplicationPersistentVolume) GetCapacity() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Capacity (GB)",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.Capacity)
			return str
		},
	}
}

func (n *DisplayDeployment) GetInstanceCount() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Instance Count",
		ColumnTag:   "",
		Value: func() string {
			str := strconv.Itoa(n.InstanceCount)
			return str
		},
	}
}

func (n *DisplayMetadata) GetIsDeleted() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Is Deleted",
		ColumnTag:   "is_deleted",
		Value: func() string {
			str := strconv.FormatBool(n.IsDeleted)
			if str == "true" {
				return printer.RedText(str)
			}
			if str == "false" {
				return printer.GreenText(str)
			}
			return str
		},
	}
}

func (n *DisplayMatchingComputeCapability) GetCapabilityNames() printer.DisplayField {

	// Sort the array to make the output deterministic
	sort.Strings(n.CapabilityNames)
	return printer.DisplayField{
		DisplayName: "Capability Names",
		ColumnTag:   "",
		Value: func() string {
			str := strings.Join(n.CapabilityNames, "\n")
			return str
		},
	}
}

func (n *DisplayMetadata) GetID() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Node ID",
		ColumnTag:   "node_id",
		Value: func() string {
			str := n.ID
			return str
		},
	}
}

func (n *DisplayDeploymentPlan) GetName() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Deployment Plan Name",
		ColumnTag:   "name",
		Value: func() string {
			str := n.Name
			return str
		},
	}
}

func (n *DisplayDeploymentPlanStatus) GetState() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Deployment Plan State",
		ColumnTag:   "state",
		Value: func() string {
			str := n.State
			if str == "DeploymentPlanState_INACTIVE" {
				return printer.RedText(str)
			}
			if str == "DeploymentPlanState_UNKNOWN" {
				return printer.RedText(str)
			}
			if str == "DeploymentPlanState_ACTIVE" {
				return printer.GreenText(str)
			}
			return str
		},
	}
}

func (n *DisplayDeploymentPlanStatus) GetMessage() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Status Message",
		ColumnTag:   "message",
		Value: func() string {
			str := n.Message
			return str
		},
	}
}

func (n *DisplayDeploymentPlan) GetNamespace() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Namespace",
		ColumnTag:   "namespace",
		Value: func() string {
			str := n.Namespace
			return str
		},
	}
}

func (n *DisplayDeploymentPlan) GetServiceName() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Service Name",
		ColumnTag:   "service_name",
		Value: func() string {
			str := n.ServiceName
			return str
		},
	}
}

func (n *DisplayMatchingComputeCapability) GetCapabilityType() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Capability Type",
		ColumnTag:   "",
		Value: func() string {
			str := n.CapabilityType
			return str
		},
	}
}

func (n *DisplayMatchingComputeCapability) GetComparator() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Comparator",
		ColumnTag:   "",
		Value: func() string {
			str := n.Comparator
			return str
		},
	}
}

func (n *DisplayApplication) GetPayloadName() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Payload Name",
		ColumnTag:   "",
		Value: func() string {
			str := n.PayloadName
			return str
		},
	}
}

func (n *DisplayApplicationPort) GetProtocol() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Protocol",
		ColumnTag:   "",
		Value: func() string {
			str := n.Protocol
			return str
		},
	}
}

func (n *DisplayApplicationPersistentVolume) GetStorageClass() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Storage Class",
		ColumnTag:   "",
		Value: func() string {
			str := n.StorageClass
			return str
		},
	}
}

func (n *DisplayApplicationPersistentVolume) GetMountPath() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Mount Path",
		ColumnTag:   "",
		Value: func() string {
			str := n.MountPath
			return str
		},
	}
}

func (n *DisplayDeployment) GetID() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Deployment ID",
		ColumnTag:   "",
		Value: func() string {
			str := n.ID
			return str
		},
	}
}

func (n *DisplayDeploymentStatus) GetState() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Deployment State",
		ColumnTag:   "",
		Value: func() string {
			str := n.State
			if str == "DeploymentState_FAILED" {
				return printer.RedText(str)
			}
			if str == "DeploymentState_PENDING" {
				return printer.RedText(str)
			}
			if str == "DeploymentState_COMPLETED" {
				return printer.GreenText(str)
			}
			return str
		},
	}
}

func (n *DisplayDeploymentStatus) GetMessage() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Status Message",
		ColumnTag:   "",
		Value: func() string {
			str := n.Message
			return str
		},
	}
}

func (n *DisplayPayloadCoordinates) GetPayloadName() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Payload Name",
		ColumnTag:   "",
		Value: func() string {
			str := n.PayloadName
			return str
		},
	}
}

func (n *DisplayPayloadCoordinates) GetCoordinates() printer.DisplayField {
	return printer.DisplayField{
		DisplayName: "Coordinates",
		ColumnTag:   "",
		Value: func() string {
			str := n.Coordinates
			return str
		},
	}
}
